---
#* ESP32s3 sensor board script name reflecting configuration esp32_MMmm_SSss__PP.yaml
#* Please read README.md for details
#? ESP32-WROOM-32 minimum wiring https://www.mischianti.org/2021/05/30/esp32-wroom-32-esp32-s-flash-pinout-specs-and-ide-configuration-1/
###
# Pawelo, 20241223, created based on esp32c3_dev.yaml

#! run with this command to override substitutions
# esphome -s devicename espXX -s updates 1min -s room <Room name> -s mqtt_room <room> run esp32_MMmm_SSss__PP.yaml --device 192.168.x.x
# here are default values if those are not given via command line

substitutions:
  devices: "Temperature, Humidity, Pressure, Gas, eCO2, VOC via BME680, Illuminance via BH1750, IR Receiver, IR Transmitter"
  project_name: "pgolawsk.esp_home"
  version: "20241223"

  board_variant: "s3" # empty for ESP32, other values to display like c3, c6, s2, s3
  board: "esp32-s3-devkitc-1" # like: esp32dev, esp32cam, esp32-c3-devkitm-1, esp32-s3-devkitc-1, esp32-s2-saola-1, full list here https://registry.platformio.org/platforms/platformio/espressif32/boards?version=5.3.0
  flash_size: 16MB # One of 2MB, 4MB, 8MB, 16MB or 32MB
  flash_write_interval: "5min"

  devicename: esp32-xx
  updates: "30s"
  room: Room # friendly name of room to display in HA/Web
  # this is ADDITIONAL topic and sub-topic for MQTT - it publishes under <topic>/<sub-topic>/<sensor>
  # by default it's also published under <devicename>/<id_sensor>
  mqtt_location: home
  mqtt_room: room

  # default variable values for !include statements
  accuracy_decimals: "2"

# Override some settings included below in _board_ setup
<<: !include includes/time_sntp_with_sun.yaml #WARN: this is to make sunrise and sunset sensor to be updated on every time sync event
# <<: !include includes/mqtt_with_rtttl.yaml #WARN: override mqtt with RTTTL support if needed (buzzer and status led)
# <<: !include { file: includes/logger_level.yaml, vars: { level: DEBUG, baud_rate: 115200 } } #WARN: override default log level to specific one
# <<: !include { file: includes/logger_level.yaml, vars: { level: VERY_VERBOSE, baud_rate: 115200 } } #WARN: override default log level to specific one
# <<: !include includes/wifi_outside.yaml #WARN: override wifi to connect to outside network instead of default
# <<: !include { file: includes/wifi_main.yaml, vars: { } } #WARN: override wifi to connect to extended network instead of default
# <<: !include { file: includes/wifi_extended.yaml, vars: { } } #WARN: override wifi to connect to extended network instead of default
# <<: !include { file: includes/wifi_extended2.yaml, vars: { } } #WARN: override wifi to connect to extended network instead of default
# <<: !include includes/api_services.yaml #WARN: this is to expose services like scan_wifi (results in scan_results sensor)

# Include basics of a board
<<: !include { file: includes/board_esp32.yaml, vars: { board_variant: "${board_variant}", board: "${board}", flash_size: "${flash_size}", flash_write_interval: "${flash_write_interval}" } }
<<: !include { file: includes/psram.yaml, vars: { mode: "quad" } } # "quad' for 2MB, "octal" for 4-8MB PSRAM

# Include interfaces needed
<<: !include { file: interfaces/debug.yaml, vars: { update_interval: "5s" } }
<<: !include { file: interfaces/i2c.yaml, vars: { bus_id: "bus_a", sda: "GPIO21", scl: "GPIO20" } }
# <<: !include { file: interfaces/dallas.yaml, vars: { gpio: "GPIO10" } }
# <<: !include { file: interfaces/rtttl.yaml, vars: { ix: "" } }
# <<: !include { file: interfaces/spi.yaml, vars: { spi_id: "spi_a", clk: "GPIO6", mosi: "GPIO7", miso: "GPIO9" } }
# <<: !include { file: interfaces/spi_rc522.yaml, vars: { spi_id: "spi_a", cs: "GPIO5", reset: "GPIO4" } }
<<: !include { file: interfaces/i2c_bme68x_bsec2.yaml, vars: { ix: "", address: "0x77" } }
<<: !include { file: interfaces/ir_receiver.yaml, vars: { gpio: "GPIO3", dump: "nec", rmt_channel: 4 } } # for ESP32c3 can be 2-3, for ESP32 can be 0-7, for ESP32s2 0-3, for ESP32s3 4-7
<<: !include { file: interfaces/ir_transmitter.yaml, vars: { gpio: "GPIO4", rmt_channel: 0 } } # for ESP32c3 can be 0-1, for ESP32 can be 0-7, for ESP32s2 0-3, for ESP32s3 0-3

# IR Remote control buttons added from packages
packages:
  # apple_tv: !include { file: buttons/set_apple_tv_ir_remote.yaml, vars: { receiver: "ATV" } }
  smart_tv: !include { file: buttons/set_smart_tv_ir_remote.yaml, vars: { receiver: "STV" } }
  # smart_tv_x: !include { file: buttons/set_smart_tv_ir_remote_rest.yaml, vars: { receiver: "STVx" } }
  # nano_pc: !include { file: buttons/set_nano_pc_ir_remote.yaml, vars: { receiver: "NPC" } }
  # nano_pc_x: !include { file: buttons/set_nano_pc_ir_remote_rest.yaml, vars: { receiver: "NPCx" } }
  lg_tv: !include { file: buttons/set_lg_tv_ir_remote.yaml, vars: { receiver: "TV" } }
  # lg_tv_x: !include { file: buttons/set_lg_tv_ir_remote_rest.yaml, vars: { receiver: "TVx" } }
  yamaha_av_main: !include { file: buttons/set_yamaha_av_main_ir_remote.yaml, vars: { receiver: "AV" } }
  # yamaha_av_main_x: !include { file: buttons/set_yamaha_av_main_ir_remote_rest.yaml, vars: { receiver: "AVx" } }
  yamaha_av_zone2: !include { file: buttons/set_yamaha_av_zone2_ir_remote.yaml, vars: { receiver: "AV2" } }
  # yamaha_av_zone2_x: !include { file: buttons/set_yamaha_av_zone2_ir_remote_rest.yaml, vars: { receiver: "AV2x" } }
  # yamaha_bd: !include { file: buttons/set_yamaha_bd_ir_remote.yaml, vars: { receiver: "BD" } }
  # yamaha_bd_x: !include { file: buttons/set_yamaha_bd_ir_remote_rest.yaml, vars: { receiver: "BDx" } }

text_sensor:
  - !include sensors/text_uptime.yaml
  - !include sensors/text_version.yaml
  - !include sensors/text_wifi_info.yaml

  # DEBUG component
  - !include sensors/text_debug.yaml

  # Sun component
  - !include sensors/text_sun_sunrise.yaml
  - !include sensors/text_sun_sunset.yaml
  - !include sensors/text_sun_time_of_day.yaml
  - !include sensors/text_sun_direction.yaml

  # Air Quality sensor
  # - !include { file: sensors/text_air_quality.yaml }
  - !include sensors/text_air_quality_bme68x_bsec2.yaml
  - !include sensors/text_IAQ_accuracy_bme68x_bsec2.yaml

binary_sensor:
  # HA Connected
  - !include sensors/binary_ha_connected.yaml

sensor:
  # - !include sensors/temp_internal.yaml
  - !include sensors/uptime.yaml
  - !include sensors/wifi_signal.yaml
  - !include sensors/wifi_strength.yaml

  # DEBUG component
  # - !include sensors/debug.yaml
  - !include sensors/debug_with_psram.yaml

  # Sun component
  - !include sensors/sun_elevation.yaml
  - !include sensors/sun_azimuth.yaml

  # Temperature and Humidity sensor
  # - !include { file: sensors/temp_hum_SHT3x.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x44" } }
  # - !include { file: sensors/temp_hum_AHT2x.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x38" } }

  # Temperature, Humidity, Pressure and Gas Resistance sensor
  # - !include { file: sensors/temp_hum_press_gas_BME680.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x77", temp_offset: 0.0, hum_offset: 0.0, pressure_offset: 0.0 } }
  - !include { file: sensors/temp_hum_press_gas_aqi_co2_voc_bme680.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x77", temp_offset: -1.7, hum_offset: -3.0, pressure_offset: 7.0 } }  #!not working (bricked device)

  # Illuminance sensor
  # - !include { file: sensors/lux_BH1750.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x23" } }

  # TVOC and eCO2 sensor
  # - !include { file: sensors/tvoc_eco2_SGP30.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x58" } }
  # - !include { file: sensors/tvoc_eco2_ENS160.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x53" } }

button:
  # Restart, reset and shutdown buttons
  - !include { file: buttons/restart_button.yaml }
  # for _dev.yaml scripts include additional buttons
  - !include { file: buttons/safe_mode_restart_button.yaml }
  - !include { file: buttons/factory_reset_button.yaml }
  - !include { file: buttons/shutdown_button.yaml }

  # Scan Wifi button (require wifi_info text sensor to be present to display results)
  # WARN: Performing the scan will disconnect device from current WiFi
  - !include { file: buttons/scan_wifi_button.yaml }

  # IR Remote control buttons - include as a package
  # single remote buttons can be included here separately
  # # Apple TV Remote,MENU,Received NEC: address=0x87EE, command=0xB603 command_repeats=1
  # - !include { file: buttons/rc_nec_button.yaml, vars: { receiver: "AppleTV", action: "MENU", address: 0x87EE, command: 0xB603 } }
  # # some LG TV buttons - via LG
  # - !include { file: buttons/rc_lg_button.yaml, vars: { receiver: "LGTV", action: "POWER", data: 0x20DF10EF } }
  # - !include { file: buttons/rc_lg_button.yaml, vars: { receiver: "LGTV", action: "INPUT", data: 0x20DFD02F } }
  # - !include { file: buttons/rc_lg_button.yaml, vars: { receiver: "LGTV", action: "MUTE", data: 0x20DF906F } }
  # - !include { file: buttons/rc_lg_button.yaml, vars: { receiver: "LGTV", action: "BACK", data: 0x20DF14EB } }
  # # some LG TV buttons - via NEC
  # - !include { file: buttons/rc_nec_button.yaml, vars: { receiver: "LG_TV", action: "1", address: 0xFB04, command: 0xEE11 } }
  # - !include { file: buttons/rc_nec_button.yaml, vars: { receiver: "LG_TV", action: "HOME", address: 0xFB04, command: 0xBC43 } }

switch:
  # LED cycle
  - !include { file: switches/led_cycle.yaml, vars: { ID: "led", cycles: 3, on_delay: "1s" , off_delay: "1000ms" } }

output:
  # LED (blue on standard C3 mini)
  - !include { file: outputs/led.yaml, vars: { ix: "", gpio: "GPIO8", inverted: true } }

  # LED RGB (blue only)
  # - !include { file: outputs/led.yaml, vars: { ix: "", gpio: "GPIO7", inverted: false } }
  # OR
  # LED RGB (multicolor)
  # - !include { file: outputs/led_rgb.yaml, vars: { ix: "", ID: "rgb_led" } }

light:
  # LED
  - !include { file: lights/led.yaml, vars: { ix: "", platform: "status_led", off_delay: "1days" } }
  # LED RGB
  # - !include { file: lights/led_rgb_neopixelbus.yaml, vars: { ix: "", gpio: "GPIO8" } }

