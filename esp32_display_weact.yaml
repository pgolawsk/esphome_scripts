---
#* ESP32 WeAct 2.9' display
#! NOT CONFIRMED AS WORKING YET
#* Please read README.md for details
###
# Pawelo 20230921, created based on esp32_display.yaml and https://github.com/esphome/feature-requests/issues/2101
# Pawelo 20230923, 1.1.5, added HA Connected binary sensor
# Pawelo 20230924, 1.1.5, added Sun Direction and Time Of Day sensors text sensors
# Pawelo 20230924, 1.1.5, ssuport for physical buttons
#
#! run with this command to override substitutions
# esphome -s devicename espXX -s updates 1min -s room <Room name> -s mqtt_room <room> run esp32_MMmm_SSss__PP.yaml --device 192.168.x.x
# heare are default values if those are not given via command line
substitutions:
#  devices: "Temperature and Humidity via SHTx30 and Illuminance via BH1750"
  devices: "WeAct Display and MQTT sensors"
  project_name: "pgolawsk.esp_home"
  version: "1.1.5"

  devicename: esp32-xx
  updates: "30s"
  room: Room # friendly name of room to display in HA/Web
  # this is ADDITIONAL topic and sub-topic for MQTT - it publishes under <topic>/<sub-topic>/<sensor>
  # by default it's also published under <devicename>/<id_sensor>
  mqtt_location: home
  mqtt_room: room

  # Display setup variables
  display_xRes: "296"
  display_yRes: "128"
  display_rotation: "270"
  run_time: 20s #needs to be as long as needed to get data
  sleep_time: 2min # normal sleep time
  away_sleep_time: 1h # sleep time when nobody's at home
  night_sleep_time: 6.5h # 1st sleep time after midnight
  refresh_interval: ${updates} #refresh when on USB power

# Include basics of a board
<<: !include includes/board_esp32_with_sun.yaml
# Include/Override mqtt with/without RTTTL support if needed
<<: !include includes/mqtt.yaml
#<<: !include includes/mqtt_with_rtttl.yaml
#<<: !include includes/qr_guestwifi.yaml

# Include interfaces needed
# <<: !include { file: interfaces/i2c.yaml, vars: { bus_id: "bus_a", sda: "GPIO21", scl: "GPIO22" } }
# <<: !include { file: interfaces/i2c.yaml, vars: { bus_id: "bus_b", sda: "GPIO14", scl: "GPIO15" } }
# <<: !include { file: interfaces/dallas.yaml, vars: { gpio: "GPIO10" } }
# <<: !include { file: interfaces/rtttl.yaml, vars: { ix: "" } }

# # reinclude MQTT as a bug in ESPHOME, see: https://github.com/esphome/issues/issues/2180, https://github.com/esphome/issues/issues/1487
# mqtt:
#   broker: !secret mqtt_ip
#   port: !secret mqtt_port
# #  username: $devicename
#   username: !secret mqtt_user
#   password: !secret mqtt_password
#   client_id: $devicename
# # id: $devicename

text_sensor:
  - !include sensors/text_uptime.yaml
  - !include sensors/text_version.yaml
  - !include sensors/text_wifi_info.yaml
  # Sun component
  - !include sensors/text_sun_sunrise.yaml
  - !include sensors/text_sun_sunset.yaml
  - !include sensors/text_sun_time_of_day.yaml
  - !include sensors/text_sun_direction.yaml

binary_sensor:
  # HA Connected
  - !include sensors/binary_ha_connected.yaml

  # # Physical buttons
  # - !include { file: sensors/binary_display_button.yaml, vars: { ix: "Refresh", gpio: "GPIO39" } }
  # - !include { file: sensors/binary_display_button.yaml, vars: { ix: "Next", gpio: "GPIO34" } }
  # - !include { file: sensors/binary_display_button.yaml, vars: { ix: "Prev", gpio: "GPIO35" } }

sensor:
  - !include sensors/temp_internal.yaml
  - !include sensors/uptime.yaml
  - !include sensors/wifi_signal.yaml

  # Sun component
  - !include sensors/sun_elevation.yaml
  - !include sensors/sun_azimuth.yaml

  # # Temperature and Humidity sensor
  # - !include { file: sensors/temp_hum_SHT3x.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x44" } }
  # # Illuminance sensor
  # - !include { file: sensors/lux_BH1750.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x23" } }

  # Various MQTT sensors
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/entrance/temperature", id: "temp_entrance", name: "Temperature Entrance", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/upstairs/temperature", id: "temp_upstairs", name: "Temperature Upstairs", unit: "°C", mdi_icon: "thermometer" } }

  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature", id: "temp_underfloor", name: "Temperature Underfloor", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature_Dwall", id: "temp_underfloorW", name: "Temperature Underfloor Wall", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature_Dboiler", id: "temp_underfloorB", name: "Temperature Underfloor Boiler", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/aquarium_window/temperature", id: "temp_aquariumW", name: "Temperature Aquarium Window", unit: "°C", mdi_icon: "thermometer" } }

  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/entrance/humidity", id: "hum_entrance", name: "Humidity Entrance", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/upstairs/humidity", id: "hum_upstairs", name: "Humidity Upstairs", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/humidity", id: "hum_underfloor", name: "Humidity Underfloor", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/aquarium_window/humidity", id: "hum_aquariumW", name: "Humidity Aquarium Window", unit: "%", mdi_icon: "water-percent" } }

    # on_value: # Actions to perform once data for the last sensor has been received
    #   then:
    #     - script.execute: all_data_received

# switch:
#   # Restart button
#   - !include switches/platform_restart.yaml

button:
  # Restart button
  - !include { file: buttons/restart_button.yaml }

  # display buttons
  - !include { file: buttons/display_button.yaml, vars: { ix: "Refresh", display_id: "weact_display", command: "", mdi_icon: "refresh" } }
  - !include { file: buttons/display_button.yaml, vars: { ix: "Next", display_id: "weact_display", command: "next", mdi_icon: "page-next" } }
  - !include { file: buttons/display_button.yaml, vars: { ix: "Prev", display_id: "weact_display", command: "previous", mdi_icon: "page-previous" } }

  # - platform: template
  #   name: "${devicename} Refresh"
  #   icon: "mdi:update"
  #   on_press:
  #     then:
  #     - component.update: t5_display

# deep_sleep:
#   run_duration: ${run_time}
#   sleep_duration: ${sleep_time}
#   id: deep_sleep_1
#   esp32_ext1_wakeup:
#     pins: GPIO39
#     mode: ALL_LOW

font:
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_85_font
    size: 85
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_75_font
    size: 75
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_60_font
    size: 60
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_50_font
    size: 50
  - file: 'fonts/Roboto-Light.ttf'
    id: size_12_font
    size: 12
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_15_font
    size: 15
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_14_font
    size: 14
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_20_font
    glyphs:
      ['&', '@', '!', ',', '.', '?', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
        '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
        'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
        'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
        'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
        'u', 'v', 'w', 'x', 'y', 'z', '/']
    size: 20
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_25_font
    size: 25
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_30_font
    size: 30
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_font
    size: 120
    glyphs: [
      # Weather
      "\U000F0599", # mdi-weather-sunny
      "\U000F0590", # mdi-weather-cloudy
      "\U000F0596", # mdi-weather-pouring
      "\U000F067F", # mdi-weather-snowy-rainy
      "\U000F0F36", # mdi-weather-snowy-heavy
      "\U000F059E", # mdi-weather-windy-variant
      "\U000F0591", # mdi-weather-fog
      "\U000F0F31", # mdi-weather-night-partly-cloudy
      "\U000F0595", # mdi-weather-partly-cloudy
      "\U000F0597", # mdi-weather-rainy
      "\U000F0598", # mdi-weather-snowy
      "\U000F0594", # mdi-weather-clear-night
      "\U000F199F", # unknown
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_temp_icon_font
    size: 25
    glyphs: [
      "\U000F0E03", # mdi-down
      "\U000F0E02", # mdi-up
      "\U000F058C", # raindrop
      "\U000F059D", # wind
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: measures_50_font
    size: 45
    glyphs: [
      "\U000F050F", # thermomether (temperature)
      "\U000F0F54", # home-thermomether (temperature)
      "\U000F0F55", # home-thermomether-outline (temperature)
      "\U000F058E", # water-percent (humidity)
      "\U000F0336", # lightbulb-outline (illuminance)
      "\U000F17FE", # sun-wireless (illuminance)
      "\U000F058F", # water-pump (water)
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: units_22_font
    size: 22
    glyphs: [
      "\U000F0504", # temperature-celcius
      "\U000F03F0", # percent (humidity)
      # "\U000", # illuminance
      # "\U000", # water
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: home_icon_font
    size: 24
    glyphs: [
      "\U000F0F48", # mdi-chair-rolling
      "\U000F02E3", # mdi-bed
      "\U000F04B9", # mdi-sofa
      "\U000F065A", # mdi-pot-steam
      "\U000F06D9", # mdi-garage
      "\U000F12BD", # mdi-stairs-up
      "\U000F112B", # mdi-home-roof
      "\U000F081A", # mdi-door
      "\U000F0DD3", # home-floor-negative-1
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_font_45
    size: 45
    glyphs: [
      # Moon
      "\U000F0F64", # new_moon
      "\U000F0F67", # waxing_crecent
      "\U000F0F61", # first_quarter
      "\U000F0F66", # waxing_gibbous
      "\U000F0F62", # full_moon
      "\U000F0F68", # waning_gibbous
      "\U000F0F63", # last_quarter
      "\U000F0F65", # waning_crescent
      "\U000F199F", # mdi-timer-sand-complete
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: sun_icon_font
    size: 20
    glyphs: [
      "\U000F059C", # sun rise
      "\U000F059B", # sun set
      "\U000F059A", # weather-sunset
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: wlan_icon_font
    size: 25
    glyphs: [
      "\U000F0920", # wifi-strength-1-alert
      "\U000F0922", # wifi-strenght-2
      "\U000F0925", # wifi-strenght-3
      "\U000F0928", # wifi-strenght-4
      "\U000F092E", # wifi-strength-off-outline
      ]

external_components:
  - source: github://pr#4579
    components: [waveshare_epaper]

spi:
  id: spi_v
  clk_pin: GPIO18 # SCL
  mosi_pin: GPIO23 # SDA

display:
  - platform: waveshare_epaper
    model: 2.90inbs
    id: weact_display
    cs_pin: GPIO16
    busy_pin: GPIO5
    reset_pin: GPIO17
    dc_pin: GPIO19
    rotation: ${display_rotation}
    full_update_every: 10
    update_interval: 60s

    pages:
      - id: blank
        lambda: |-
          // Blanl Page
          int x, y;
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}
          //draw clear background
          it.filled_rectangle(0, 0, xRes, yRes, COLOR_OFF);
          it.print(xRes/2, yRes/2, id(size_14_font), COLOR_ON, TextAlign::CENTER, "Refreshing...");

      - id: page0
        lambda: |-
          // Date & Time Page
          int x, y;
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}

          //sun set-rise
          it.printf(45, 22, id(sun_icon_font), TextAlign::BASELINE_RIGHT, "\U000F059C");
          it.printf(135, 22, id(size_20_font), TextAlign::BASELINE_RIGHT, "%s", id(sunrise).state.c_str());
          it.printf(45, 44, id(sun_icon_font), TextAlign::BASELINE_RIGHT, "\U000F059A");
          it.printf(135, 44, id(size_20_font), TextAlign::BASELINE_RIGHT, "%s", id(sunset).state.c_str());
          //date

          it.strftime(210, 43, id(size_50_font), TextAlign::BASELINE_RIGHT, "%d", id(sntp_time).now());
          it.printf(213, 43, id(size_14_font), TextAlign::BASELINE_LEFT, "D");
          it.strftime(280, 43, id(size_50_font), TextAlign::BASELINE_RIGHT, "%m", id(sntp_time).now());
          it.printf(283, 43, id(size_14_font), TextAlign::BASELINE_LEFT, "M");

          //line
          it.line(0, 54, 296, 54);

          //Time
          it.strftime(20, 45, id(size_85_font), "%H:%M", id(sntp_time).now());
          /* it.strftime(225, 68, id(size_60_font), "%S", id(sntp_time).now()); */

          it.strftime(250, 58, id(size_20_font), "%a", id(sntp_time).now());

          //wifi
          if (id(wifi_rssi).has_state()) {
            x = 265, y = 120;
            if (id(wifi_rssi).state >= -50) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_CENTER , "\U000F0928");
            } else if (id(wifi_rssi).state >= -60) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_CENTER , "\U000F0925");
            } else if (id(wifi_rssi).state >= -70) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_CENTER , "\U000F0922");
            } else if (id(wifi_rssi).state >= -80) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_CENTER , "\U000F0920");
            } else {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_CENTER , "\U000F092E");
            }
          }

      - id: page1
        lambda: |-
          // Main Home Temperatures and Humidity Page
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}
          int x, y;

          //* Temperature
          x = 24; y = 64;
          it.printf(x, y-12, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F0F55");

          // Entrance
          x = 70; y = 30;
          it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F081A");
          if (id(temp_entrance).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(temp_entrance).state);
            // it.printf(x+74, y, id(size_20_font), TextAlign::BASELINE_LEFT , "°");
            // it.printf(x+80, y, id(size_20_font), TextAlign::BASELINE_LEFT , "C");
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
          }

          // Upstairs
          x = 200; y = 30;
          it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F12BD");
          if (id(temp_upstairs).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(temp_upstairs).state);
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
          }

          // Underfloor
          x = 70; y = 60;
          it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F0DD3");
          if (id(temp_underfloor).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(temp_underfloor).state);
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
          }

          // Aquarium Window
          x = 200; y = 60;
          it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F112B");
          if (id(temp_aquariumW).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(temp_aquariumW).state);
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
          }

          //line
          it.line(0, 64, 296, 64);

          //* Humidity
          x = 24; y = 128;
          it.printf(x, y-12, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F058E");

          // Entrance
          x = 70; y = 94;
          it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F081A");
          if (id(hum_entrance).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(hum_entrance).state);
            // it.printf(x+74, y, id(size_20_font), TextAlign::BASELINE_LEFT , "°");
            // it.printf(x+80, y, id(size_20_font), TextAlign::BASELINE_LEFT , "C");
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
          }

          // Upstairs
          x = 200; y = 94;
          it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F12BD");
          if (id(hum_upstairs).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(hum_upstairs).state);
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
          }

          // Underfloor
          x = 70; y = 124;
          it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F0DD3");
          if (id(hum_underfloor).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(hum_underfloor).state);
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
          }

          // Aquarium Window
          x = 200; y = 124;
          it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F112B");
          if (id(hum_aquariumW).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(hum_aquariumW).state);
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
          }

