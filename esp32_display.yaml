---
#* ESP32 LillyGo T5 4.7 display
#* Please read README.md for details
###
# Pawelo 20230308, created based on https://github.com/danuw/esphome-configs/blob/epd-multipage/epd47-1.yaml
# Pawelo 20230310, added battery sensor based on https://github.com/esphome/feature-requests/issues/1109#issuecomment-1408376503
#TODO: good example to deep_sleep: https://gist.github.com/Plawasan/8e27956db016eb5158311b94d096509b
#                                  https://gist.github.com/Plawasan/4ae826b05aaa7812f3a191714ca47a50
#                                  https://pastebin.com/Yd7xhtCQ
#
#! run with this command to override substitutions
# esphome -s devicename espXX -s updates 1min -s room <Room name> -s mqtt_room <room> run esp32_MMmm_SSss__PP.yaml --device 192.168.x.x
# heare are default values if those are not given via command line
substitutions:
#  devices: "Temperature and Humidity via SHTx30 and Illuminance via BH1750"
  devices: "T5 Display and MQTT sensors"
  project_name: "pgolawsk.esp_home"
  version: "1.1.5"

  devicename: esp32-xx
  updates: "30s"
  room: Room # friendly name of room to display in HA/Web
  # this is ADDITIONAL topic and sub-topic for MQTT - it publishes under <topic>/<sub-topic>/<sensor>
  # by default it's also published under <devicename>/<id_sensor>
  mqtt_location: home
  mqtt_room: room

  run_time: 20s #needs to be as long as needed to get data
  sleep_time: 2min # normal sleep time
  away_sleep_time: 1h # sleep time when nobody's at home
  night_sleep_time: 6.5h # 1st sleep time after midnight
  refresh_interval: ${updates} #refresh when on USB power

# Include basics of a board
<<: !include includes/board_esp32.yaml
# Include/Override mqtt with/without RTTTL support if needed
<<: !include includes/mqtt.yaml
#<<: !include includes/mqtt_with_rtttl.yaml
<<: !include includes/qr_guestwifi.yaml

# Include interfaces needed
# <<: !include { file: interfaces/i2c.yaml, vars: { bus_id: "bus_a", sda: "GPIO12", scl: "GPIO13" } }
# <<: !include { file: interfaces/i2c.yaml, vars: { bus_id: "bus_b", sda: "GPIO14", scl: "GPIO15" } }
# <<: !include { file: interfaces/dallas.yaml, vars: { gpio: "GPIO10" } }
# <<: !include { file: interfaces/rtttl.yaml, vars: { ix: "" } }

# # reinclude MQTT as a bug in ESPHOME, see: https://github.com/esphome/issues/issues/2180, https://github.com/esphome/issues/issues/1487
# mqtt:
#   broker: !secret mqtt_ip
#   port: !secret mqtt_port
# #  username: $devicename
#   username: !secret mqtt_user
#   password: !secret mqtt_password
#   client_id: $devicename
# # id: $devicename

text_sensor:
  - !include sensors/text_uptime.yaml
  - !include sensors/text_version.yaml
  - !include sensors/text_wifi_info.yaml
  # Sun component
  - !include { file: sensors/text_sun_sunrise.yaml, vars: { updates: "${updates}" } }
  - !include { file: sensors/text_sun_sunset.yaml, vars: { updates: "${updates}" } }

  # Powered From sensor
  - !include { file: sensors/text_powered_from_lilygo_T5_47.yaml, vars: { ix: "", usb_threshold_voltage: 4.5 } } # below threshold voltage its is BATERY, above it's USB

binary_sensor:
  # LilyGo buttons
  - !include { file: sensors/binary_display_button.yaml, vars: { ix: "Refresh", gpio: "GPIO39" } }
  - !include { file: sensors/binary_display_button.yaml, vars: { ix: "Next", gpio: "GPIO34" } }
  - !include { file: sensors/binary_display_button.yaml, vars: { ix: "Prev", gpio: "GPIO35" } }

sensor:
  - !include sensors/temp_internal.yaml
  - !include sensors/uptime.yaml
  - !include sensors/wifi_signal.yaml
  # Sun component
  - !include sensors/sun_elevation.yaml
  - !include sensors/sun_azimuth.yaml

  # # Temperature and Humidity sensor
  # - !include { file: sensors/temp_hum_SHT3x.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x44" } }
  # # Illuminance sensor
  # - !include { file: sensors/lux_BH1750.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x23" } }

  # Various MQTT sensors
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/entrance/temperature", id: "temp_entrance", name: "Temperature Entrance", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/upstairs/temperature", id: "temp_upstairs", name: "Temperature Upstairs", unit: "°C", mdi_icon: "thermometer" } }

  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature", id: "temp_underfloor", name: "Temperature Underfloor", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature_Dshort", id: "temp_underfloorS", name: "Temperature Underfloor Short", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature_Dlong", id: "temp_underfloorL", name: "Temperature Underfloor Long", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/aquarium_window/temperature", id: "temp_aquariumW", name: "Temperature Aquarium Window", unit: "°C", mdi_icon: "thermometer" } }

  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/entrance/humidity", id: "hum_entrance", name: "Humidity Entrance", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/upstairs/humidity", id: "hum_upstairs", name: "Humidity Upstairs", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/humidity", id: "hum_underfloor", name: "Humidity Underfloor", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/aquarium_window/humidity", id: "hum_aquariumW", name: "Humidity Aquarium Window", unit: "%", mdi_icon: "water-percent" } }

  # Battery voltage sensor
  - !include { file: sensors/voltage_battery_lilygo_T5_47.yaml, vars: { ix: "" } }
  - !include { file: sensors/percentage_battery_lilygo_T5_47.yaml, vars: { ix: "", max_voltage: 4.16, min_voltage: 3.35 } }

    # on_value: # Actions to perform once data for the last sensor has been received
    #   then:
    #     - script.execute: all_data_received

# switch:
#   # Restart button
#   - !include switches/platform_restart.yaml

button:
  # Restart button
  - !include { file: buttons/restart_button.yaml }

  # LilyGo buttons
  - !include { file: buttons/display_button.yaml, vars: { ix: "Refresh", display_id: "t5_display", command: "", mdi_icon: "refresh" } }
  - !include { file: buttons/display_button.yaml, vars: { ix: "Next", display_id: "t5_display", command: "next", mdi_icon: "page-next" } }
  - !include { file: buttons/display_button.yaml, vars: { ix: "Prev", display_id: "t5_display", command: "previous", mdi_icon: "page-previous" } }

  # - platform: template
  #   name: "${devicename} Refresh"
  #   icon: "mdi:update"
  #   on_press:
  #     then:
  #     - component.update: t5_display

# deep_sleep:
#   run_duration: ${run_time}
#   sleep_duration: ${sleep_time}
#   id: deep_sleep_1
#   esp32_ext1_wakeup:
#     pins: GPIO39
#     mode: ALL_LOW

external_components:
  - source: github://ashald/esphome@lilygo-t5-47
    components:
      - lilygo_t5_47

# Fonts
font:
  - !include { file: fonts/font_from_file.yaml, vars: { ix: "big", font_file: "IBMPlexMono-Bold.ttf", size: 300 } }
  - !include { file: fonts/font_from_file.yaml, vars: { ix: "med", font_file: "IBMPlexMono-Bold.ttf", size: 100 } }
  - !include { file: fonts/font_from_file.yaml, vars: { ix: "med2", font_file: "IBMPlexMono-Bold.ttf", size: 40 } }
  - !include { file: fonts/font_from_file.yaml, vars: { ix: "small", font_file: "IBMPlexMono-Bold.ttf", size: 30 } }

  - !include { file: fonts/font_from_file.yaml, vars: { ix: "name", font_file: "ProductSans-Bold.ttf", size: 40 } }
  - !include { file: fonts/font_from_file.yaml, vars: { ix: "value", font_file: "ProductSans-Bold.ttf", size: 64 } }
  - !include { file: fonts/font_from_file.yaml, vars: { ix: "footer", font_file: "ProductSans-Bold.ttf", size: 28 } }

  # https://pictogrammers.github.io/@mdi/font/5.3.45/
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_icons
    size: 160
    glyphs:
      - "\U000F0594" # clear-night
      - "\U000F0590" # cloudy
      - "\U000F0595" # partlycloudy
      - "\U000F0591" # fog
      - "\U000F0592" # hail
      - "\U000F0593" # lightning
      - "\U000F067E" # lightning-rainy
      - "\U000F0596" # pouring
      - "\U000F0597" # rainy
      - "\U000F0F36" # snowy
      - "\U000F067F" # snowy-rainy
      - "\U000F0599" # sunny
      - "\U000F059D" # windy
      - "\U000F059E" # windy-variant
      - "\U000F0F38" # exceptional

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_icons_small
    size: 56
    glyphs:
      - "\U000F059C" # Sunrise
      - "\U000F059B" # Sunset
      - "\U000F10C2" # Temperature High
      - "\U000F10C3" # Temperature Low
      - "\U000F07E4" # CO2
      - "\U000F054B" # umbrella
      - "\U000F13E2" # umbrella-closed
      - "\U000F0592" # hail
      - "\U000F0593" # lightning
      - "\U000F067E" # lightning-rainy
      - "\U000F0597" # rainy
      - "\U000F0F36" # snowy
      - "\U000F0594" # clear-night
      - "\U000F0599" # sunny
      - "\U000F07CA" # fuel
      - "\U000F024A" # flower
      - "\U000F051F" # time-remaining
      - "\U000F140B" # Energy
      - "\U000F0F29" # Frost Alert

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_icons_tiny
    size: 28
    glyphs:
      - "\U000F04B2" # sleep
      - "\U000F02DC" # home
      - "\U000F13D7" # not_home
      - "\U000F12A3" # battery-high
      - "\U000F12A2" # battery-medium
      - "\U000F12A1" # battery-low
      - "\U000F008E" # battery-outline

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: mdi_sensor
    size: 50
    glyphs:
      - "\U000F007A" # mdi-battery-10
      - "\U000F007B" # mdi-battery-20
      - "\U000F007C" # mdi-battery-30
      - "\U000F007D" # mdi-battery-40
      - "\U000F007E" # mdi-battery-50
      - "\U000F007F" # mdi-battery-60
      - "\U000F0080" # mdi-battery-70
      - "\U000F0081" # mdi-battery-80
      - "\U000F0082" # mdi-battery-90
      - "\U000F0079" # mdi-battery (100%)
      - "\U000F089C" # mdi-battery-charging-10
      - "\U000F0086" # mdi-battery-charging-20
      - "\U000F0087" # mdi-battery-charging-30
      - "\U000F0088" # mdi-battery-charging-40
      - "\U000F089D" # mdi-battery-charging-50
      - "\U000F0089" # mdi-battery-charging-60
      - "\U000F089E" # mdi-battery-charging-70
      - "\U000F008A" # mdi-battery-charging-80
      - "\U000F008B" # mdi-battery-charging-90
      - "\U000F0085" # mdi-battery-charging-100 (100%)
      - "\U000F0091" # mdi-battery-unknown
      - "\U000F092B" # mdi-wifi-strength-alert-outline
      - "\U000F091F" # mdi-wifi-strength-1
      - "\U000F0922" # mdi-wifi-strength-2
      - "\U000F0925" # mdi-wifi-strength-3
      - "\U000F0928" # mdi-wifi-strength-4
      - "\U000F050F" # mdi-themometer
      - "\U000F08F0" # mdi-map-marker-distance
      - "\U000F06A5" # mdi-power-plug
      - "\U000F06A6" # mdi-power-plug-off
      - "\U000F1424" # mdi-power-plug-off-outline
      - "\U000F0B6C" # mdi-car-electric
      - "\U000F05F1" # mdi-ev-station
      - "\U000F0530" # mdi-transfer-right
      - "\U000F0F54" # mdi-home-thermometer
      - "\U000F18D6" # mdi-sun-thermometer
      - "\U000F044C" # mdi-recycle
      - "\U000F0073" # mdi-barley
      - "\U000F0A79" # mdi-trash-can
      - "\U000F00ED" # mdi-calendar
      - "\U000F181D" # mdi-kitchen-counter-outline
      - "\U000F112B" # mdi-home-roof
      - "\U000F0F92" # mdi-water-boiler
      - "\U000F0438" # mdi-radiator
      - "\U000F0AD7" # mdi-radiator-disabled
      - "\U000F0F29" # mdi-snowflake-alert
      - "\U000F0594" # mdi-clear-night
      - "\U000F0590" # mdi-cloudy
      - "\U000F0591" # mdi-fog
      - "\U000F0592" # mdi-hail
      - "\U000F0593" # mdi-lightning
      - "\U000F067E" # mdi-lightning-rainy
      - "\U000F0F31" # mdi-night-partly-cloudy
      - "\U000F0595" # mdi-partly-cloudy
      - "\U000F0596" # mdi-pouring
      - "\U000F0597" # mdi-rainy
      - "\U000F0F36" # mdi-snowy
      - "\U000F067F" # mdi-snowy-rainy
      - "\U000F0599" # mdi-sunny
      - "\U000F059D" # mdi-windy
      - "\U000F059E" # mdi-windy-variant
      - "\U000F0F38" # mdi-exceptional

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id:  mdi_footer
    size: 28
    glyphs:
      - "\U000F092B" # mdi-wifi-strength-alert-outline
      - "\U000F091F" # mdi-wifi-strength-1
      - "\U000F0922" # mdi-wifi-strength-2
      - "\U000F0925" # mdi-wifi-strength-3
      - "\U000F0928" # mdi-wifi-strength-4
      - "\U000F06A5" # mdi-power-plug
      - "\U000F06A6" # mdi-power-plug-off
      # battery
      - "\U000F008E" # bat empty
      - "\U000F007A" # bat 10
      - "\U000F007B" # bat 20
      - "\U000F007C" # bat 30
      - "\U000F007D" # bat 40
      - "\U000F007E" # bat 50
      - "\U000F007F" # bat 60
      - "\U000F0080" # bat 70
      - "\U000F0081" # bat 80
      - "\U000F0082" # bat 90
      - "\U000F0079" # bat 100
      - "\U000F0DA5" # mdi-wind-turbine
      - "\U000F19AB" # mdi-wind-turbine-alert
      - "\U000F050F" # mdi-thermometer
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F01B7" # mdi-step-over


# # Scripts
# script:
#   - id: refresh_display
#     then:
#       - repeat:
#           count: 1
#           then:
#           - display.page.show: black
#           - component.update: t5_display
#           - display.page.show: blank
#           - component.update: t5_display
#           - display.page.show: main
#           - component.update: t5_display

#   - id: all_data_received
#     mode: restart
#     then:
#       - component.update: batt_volt
#       - component.update: batt
#       - display.page.show: main
#       - component.update: t5_display
#       - if:
#           condition:
#             lambda: |-
#               if (id(batt_volt).state > 4.5) {
#                 return false;
#               }
#               return true;
#           then:
#             - script.execute: enter_sleep
#           else:
#             - logger.log: "On USB power, preventing deep sleep"
#             - deep_sleep.prevent: deep_sleep_1
#             - delay: ${updates}
#             - script.execute: all_data_received

#   - id: enter_night_sleep
#     then:
#       - logger.log: "It's nighttime, entering night sleep for ${night_sleep_time}"
#       - deep_sleep.enter:
#           id: deep_sleep_1
#           sleep_duration: ${night_sleep_time}

#   - id: enter_normal_sleep
#     then:
#       - if:
#           condition:
#             lambda: |-
#               // if (id(adults).state == "not_home") {
#               //   return false;
#               // }
#               return true;
#           then:
#             - logger.log: "It's daytime and people are home, entering short sleep for ${sleep_time}"
#             - deep_sleep.enter:
#                 id: deep_sleep_1
#                 sleep_duration: ${sleep_time}
#           else:
#             - logger.log: "It's daytime but nobody's home, entering sleep for ${away_sleep_time}"
#             - deep_sleep.enter:
#                 id: deep_sleep_1
#                 sleep_duration: ${away_sleep_time}

#   - id: enter_sleep
#     then:
#       - if:
#           condition:
#             lambda: |-
#               auto time = id(sntp_time).now();
#               if (!time.is_valid()) {
#                 return false;
#               }
#               return (time.hour < 6);
#           then:
#             - script.execute: enter_night_sleep
#           else:
#             - script.execute: enter_normal_sleep

# Display
display:
  - platform: lilygo_t5_47
    id: t5_display
    rotation: 180
    update_interval: $updates
    # update_interval: 300s
    full_update_every: 0 # optional (default:  1): 0 - never, 1 (default) - every, 2+ - throttled
    cycles_render: 15    # optional (default: 20): higher number -> less ghosting, crisper image, more time
    cycles_invert: 40    # optional (default: 20): higher number -> more timef or full update, but mor burn-in protection
    # on_page_change:
    #   - then:
    #       lambda: |-
    #         id(t5_display).clear();
    pages:
      # - id: blank
      #   lambda: |-
      #     // #define xres 540
      #     // #define yres 960
      #     #define xRes 960
      #     #define yRes 540
      #     //draw clear background
      #     it.filled_rectangle(0, 0, xRes, yRes, COLOR_OFF);
      #     it.print(xRes/2, yRes/2, id(font_name), COLOR_ON, TextAlign::CENTER, "Refreshing...");

      # - id: black
      #   lambda: |-
      #     // #define xres 540
      #     // #define yres 960
      #     #define xRes 960
      #     #define yRes 540
      #     //draw filled background
      #     it.filled_rectangle(0, 0, xRes, yRes, COLOR_ON);
      #     it.print(xRes/2, yRes/2, id(font_name), COLOR_OFF, TextAlign::CENTER, "Refreshing...");

      - id: page1
        lambda: |-
          // positioning constants
          #define xRes 960
          #define yRes 540
          #define xCenter (xRes/2 + 40) // X position center
          //id(t5_display).clear();
          it.strftime(15, 310, id(font_big), TextAlign::BASELINE_LEFT, "%H:%M", id(sntp_time).now());
          it.strftime(50, 500, id(font_med), TextAlign::BASELINE_LEFT, "%Y-%m-%d %a", id(sntp_time).now());
          it.print(xRes - 40, yRes - 40, id(font_small), TextAlign::BOTTOM_LEFT, "1");
      - id: page2
        lambda: |-
          // positioning constants
          #define xRes 960
          #define yRes 540
          #define xCenter (xRes/2 + 40) // X position center
          //id(t5_display).clear();
          it.strftime(xCenter + 100, 40, id(font_small), TextAlign::BASELINE_LEFT, "%Y-%m-%d %a", id(sntp_time).now());
          it.strftime(15, 310, id(font_big), TextAlign::BASELINE_LEFT, "%H:%M", id(sntp_time).now());
          it.printf(50, 380, id(font_small), TextAlign::BASELINE_LEFT, "Sunrise at %s and sunset at %s.", id(sunrise).state.c_str(), id(sunset).state.c_str());
          it.strftime(50, 500, id(font_med), TextAlign::BASELINE_LEFT, "%Y-%m-%d %a", id(sntp_time).now());
          it.print(xRes - 40, yRes - 40, id(font_small), TextAlign::BOTTOM_LEFT, "2");
      - id: page3
        lambda: |-
          // positioning constants
          #define xRes 960
          #define yRes 540
          #define xCenter (xRes/2 + 40) // X position center
          //id(t5_display).clear();
          it.fill(COLOR_ON);
          it.print(xRes - 40, yRes - 40, id(font_small), COLOR_OFF, TextAlign::BASELINE_LEFT, "3");
      - id: page4
        lambda: |-
          // positioning constants
          #define xRes 960
          #define yRes 540
          #define xCenter (xRes/2 + 40) // X position center
          //id(t5_display).clear();
          it.fill(COLOR_ON);
          it.strftime(10, 10, id(font_small), COLOR_OFF, TextAlign::TOP_LEFT, "%H:%M", id(sntp_time).now());
          it.print(xRes - 40, yRes-40, id(font_small), COLOR_OFF, TextAlign::BASELINE_LEFT, "4");
          /// Multiline text from https://community.home-assistant.io/t/eink-multi-line-text/255814/8
          std::string s = "Some really interesting quote over multiple lines centered on the page - by Author";//id(weather).state;
          int limit = 35;
          int space = 0;
          int i = 0;
          int line = 0;
          int y= 70; // start Y
          while(i<s.length()){ //loop through string, counting all the spaces, and replacing the last one with ~ [marked by space variable] if the count exceeds limit of 35
            if(s.substr(i,1) == " "){space = i; }
            if(line>limit-1){s=s.substr(0,space)+"~"+s.substr(space+1);line = 0;}
              i++;line++;
          }
          size_t pos = s.find("~"); //find the first line break
          int linecount = 1; //need number of lines to store the break positions in an array
          int breakpositions[10]; //store breakpositions [the '~']
          breakpositions[0] = -1; // start at -1 cause we need to truncate the replaced characters and without this will cut off 1st character of message
          while ( pos != std::string::npos) //loop through  replacing the ~ with CR - though this doesnt matter here it will never be displayed, but need to change them to keep the loop from repeating at the start
          {
            s.replace(pos,1, "\n");
            breakpositions[linecount] = pos; //store the position of the break in an array
            pos = s.find("~"); // move forward
            linecount++; // we have a new line, count it
          }
          breakpositions[linecount] = s.length(); //set the last entry in array to the length of string for calculation below
          std::string singleline; //this will be the line we print
          i = 0;
          while (i < linecount ) {  // count through the lines
            singleline = s.substr(breakpositions[i]+1,(breakpositions[i+1]-breakpositions[i]-1)); //extract each line of text from the string - strip off the CRLF and the space.
            it.printf(xCenter, y, id(font_med2), COLOR_OFF, TextAlign::BASELINE_CENTER, "%s", singleline.c_str()); //print it!
            y=y+50; // increment y to print properly on display
            i++;
          }
          it.print(xRes - 40, yRes - 40, id(font_small), TextAlign::BASELINE_LEFT, "4");
      - id: page5
        lambda: |-
          // positioning constants
          #define xRes 960
          #define yRes 540
          #define xCenter (xRes/2 + 40) // X position center
          //id(t5_display).clear();
          it.print(60, 60, id(font_small), TextAlign::BASELINE_LEFT, "Join Guest WIFI");
          it.print(xRes - 40, yRes - 40, id(font_small), TextAlign::BASELINE_LEFT, "5");
          // guest wifi
          // WIFI:S:<WIFI NAME HERE>;T:WPA;P:<WIFI PASSWOD HERE>;H:false;;
          // Draw the QR-code at position [x=50,y=100] with white color and a 2x scale
          it.qr_code(50, 100, id(guestwifi_qr), COLOR_ON, 14);