---
#* ESP32 sensor board script name reflecting configuration esp32_MMmm_SSss__PP.yaml
#* Please read README.md for details
#* For pinout see: file://.//pinouts/ESP32_WROOM_32_pinout.jpg
###
# Pawelo 20240608, 1.1.5, created based on esp32_dev.yaml
# Pawelo, 20240902, refactoring: "status_led" renamed to "led"
# Pawelo, 20241222, include first OVERRIDEs and then BOARD itself
# Pawelo, 20241222, cleanup of old/unused mqtt commented code
# Pawelo, 20241222, added wifi strength sensor and wifi_scan button
# Pawelo, 20241222, added debug component and sensors
# Pawelo, 20241222, added factory_reset, safe_restart and shutdown buttons
# Pawelo, 20241222, added PSRAM support (includes/ and debug_with_psram sensor)
# Pawelo, 20241222, changed to use includes/board_esp32.yaml with variables
# Pawelo, 20250109, added option to select desired framework_type (for board include)
# Pawelo, 20250130, added framework_version variable

#! run with this command to override substitutions
# esphome -s devicename espXX -s updates 1min -s room <Room name> -s mqtt_room <room> run esp32_MMmm_SSss__PP.yaml --device 192.168.x.x
# here are default values if those are not given via command line

substitutions:
  devices: "Temperature, Humidity, Pressure, Gas Resistance via BME680 and Illuminance, UV via LTR390"
  project_name: "pgolawsk.esp_home"
  version: "20250130"

  # required by includes/board_esp32.yaml script
  framework_type: arduino # "arduino" or "esp-idf"
  # framework_type: esp-idf # "arduino" or "esp-idf"
  framework_version: recommended # or specific version like "latest", "recommended", "4.4.4"
  # framework_version: latest # or specific version like "latest", "recommended", "4.4.4"
  board_variant: "" # empty for ESP32, other values to display like c3, c6, s2, s3
  board: "esp32dev" # like: esp32dev, esp32cam, esp32-c3-devkitm-1, esp32-s3-devkitc-1, esp32-s2-saola-1, full list here https://registry.platformio.org/platforms/platformio/espressif32/boards?version=5.3.0
  flash_size: 4MB # One of 2MB, 4MB, 8MB, 16MB or 32MB
  flash_write_interval: "5min"

  devicename: esp32-xx
  updates: "30s"
  room: Room # friendly name of room to display in HA/Web
  # this is ADDITIONAL topic and sub-topic for MQTT - it publishes under <topic>/<sub-topic>/<sensor>
  # by default it's also published under <devicename>/<id_sensor>
  mqtt_location: home
  mqtt_room: room

  # default variable values for !include statements
  accuracy_decimals: "2"

# Override some settings included below in _board_ setup
<<: !include includes/time_sntp_with_sun.yaml #WARN: this is to make sunrise and sunset sensor to be updated on every time sync event
# <<: !include includes/mqtt_with_rtttl.yaml #WARN: override mqtt with RTTTL support if needed (buzzer and status led)
# <<: !include { file: includes/logger_level.yaml, vars: { level: DEBUG, baud_rate: 115200 } } #WARN: override default log level to specific one
# <<: !include { file: includes/logger_level.yaml, vars: { level: VERY_VERBOSE, baud_rate: 115200 } } #WARN: override default log level to specific one
# <<: !include includes/wifi_outside.yaml #WARN: override wifi to connect to outside network instead of default
# <<: !include { file: includes/wifi_main.yaml, vars: { } } #WARN: override wifi to connect to extended network instead of default
# <<: !include { file: includes/wifi_extended.yaml, vars: { } } #WARN: override wifi to connect to extended network instead of default
# <<: !include { file: includes/wifi_extended2.yaml, vars: { } } #WARN: override wifi to connect to extended network instead of default
# <<: !include includes/api_services.yaml #WARN: this is to expose services like scan_wifi (results in scan_results sensor)

# Include basics of a board
# <<: !include { file: includes/board_esp32.yaml, vars: { board_variant: "${board_variant}", board: "${board}", flash_size: "${flash_size}", flash_write_interval: "${flash_write_interval}" } }
<<: !include { file: includes/board_esp32.yaml, vars: {} }
# <<: !include { file: includes/psram.yaml, vars: { mode: "quad" } } # "quad' for 2MB, "octal" for 4-8MB PSRAM
# <<: !include includes/qr_guestwifi.yaml

# Include interfaces needed
<<: !include { file: interfaces/debug.yaml, vars: { update_interval: "5s" } }
<<: !include { file: interfaces/i2c.yaml, vars: { bus_id: "bus_a", sda: "GPIO21", scl: "GPIO22" } }
<<: !include { file: interfaces/rtttl.yaml, vars: { ix: "" } }

text_sensor:
  - !include sensors/text_uptime.yaml
  - !include sensors/text_version.yaml
  - !include sensors/text_wifi_info.yaml

  # DEBUG component
  - !include sensors/text_debug.yaml

  # Sun component
  - !include sensors/text_sun_sunrise.yaml
  - !include sensors/text_sun_sunset.yaml
  - !include sensors/text_sun_time_of_day.yaml
  - !include sensors/text_sun_direction.yaml

binary_sensor:
  # HA Connected
  - !include sensors/binary_ha_connected.yaml

sensor:
  - !include sensors/temp_internal.yaml
  - !include sensors/uptime.yaml
  - !include sensors/wifi_signal.yaml
  - !include sensors/wifi_strength.yaml

  # DEBUG component
  - !include sensors/debug.yaml
  # - !include sensors/debug_with_psram.yaml

  # Sun component
  - !include sensors/sun_elevation.yaml
  - !include sensors/sun_azimuth.yaml

  # Temperature, Humidity, Pressure and Gas Resistance sensor
  - !include { file: sensors/temp_hum_press_gas_BME680.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x77" } }

  # Illuminance sensor
  - !include { file: sensors/lux_uv_ltr390.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x53" } }

output:
  # LED
  - !include { file: outputs/led.yaml, vars: { ix: "", gpio: "GPIO10", inverted: false } }

  # RTTTL Buzzer (passive_buzzer)
  - !include { file: outputs/passive_buzzer_ledc.yaml, vars: { ix: "", gpio: "GPIO16" } }

light:
  # LED
  - !include { file: lights/status_led.yaml, vars: { ix: "", platform: "binary", off_delay: "5s" } }

switch:
  # LED cycle
  - !include { file: switches/led_cycle.yaml, vars: { ID: "led", cycles: 3, on_delay: "1s" , off_delay: "500ms" } }

  # RTTTL Play (passive_buzzer)
  - !include { file: switches/rtttl_play.yaml, vars: { ix: "" } }

button:
  # Restart, reset and shutdown buttons
  - !include { file: buttons/restart_button.yaml }
  # for _dev.yaml scripts include additional buttons
  - !include { file: buttons/safe_mode_restart_button.yaml }
  - !include { file: buttons/factory_reset_button.yaml }
  - !include { file: buttons/shutdown_button.yaml }

  # Scan Wifi button (require wifi_info text sensor to be present to display results)
  # WARN: Performing the scan will disconnect device from current WiFi
  - !include { file: buttons/scan_wifi_button.yaml }