---
#* ESP32 WeAct 2.9' display
#* Please read README.md for details
#* For pinout see: file://../pinouts/ESP32_WROOM_32_pinout.jpg
###
# Pawelo 20230921, created based on esp32_display.yaml and https://github.com/esphome/feature-requests/issues/2101
# Pawelo 20230923, 1.1.5, added HA Connected binary sensor
# Pawelo 20230924, 1.1.5, added Sun Direction and Time Of Day sensors text sensors
# Pawelo 20230924, 1.1.5, support for physical buttons
# Pawelo 20231003, 1.1.5, confirmed working WeAct ePaper with mode: 2.90inbs
# Pawelo 20231003, 1.1.5, added page with Temp/Hum sensors
# Pawelo 20231004, 1.1.5, added cycle the pages, while there is some light
# Pawelo 20231004, 1.1.5, prevent cycle for 5 min when using buttons manually
# Pawelo 20231006, 1.1.5, skip blank and qr pages while cycle pages automatically
# Pawelo 20231006, 1.1.5, moved interval script for page cycles to separate yaml in scripts/
# Pawelo 20231006, 1.1.5, reduce no of digits displayed when illuminance is 100+ or 1000+
# Pawelo 20240518, 1.1.5, moved display to use waveshare_epaper to pr#6226, as per https://github.com/esphome/feature-requests/issues/2191#issuecomment-2009352588
# Pawelo 20240628, 1.1.5, move fonts to separate include file
# Pawelo, 20241222, include first OVERRIDEs and then BOARD itself
# Pawelo, 20241222, cleanup of old/unused mqtt commented code
# Pawelo, 20241222, added wifi strength sensor and wifi_scan button
# Pawelo, 20241222, added debug component and sensors
# Pawelo, 20241222, added factory_reset, safe_restart and shutdown buttons
# Pawelo, 20241222, added PSRAM support (includes/ and debug_with_psram sensor)
# Pawelo, 20241222, changed to use includes/board_esp32.yaml with variables
# Pawelo, 20250109, added option to select desired framework_type (for board include)
# Pawelo, 20250130, added framework_version variable
# Pawelo, 20250202, moved to 0_DEV folder
# Pawelo, 20250221, added uptime_boot text sensor

#! run with this command to override substitutions
# esphome -s devicename espXX -s updates 1min -s room <Room name> -s mqtt_room <room> run esp32_MMmm_SSss__PP.yaml --device 192.168.x.x
# here are default values if those are not given via command line

substitutions:
#  devices: "Temperature and Humidity via SHTx30 and Illuminance via BH1750"
  devices: "WeAct Display and MQTT sensors"
  project_name: "pgolawsk.esp_home"
  version: "20250221"

  # required by ../includes/board_esp32.yaml script
  framework_type: arduino # "arduino" or "esp-idf"
  # framework_type: esp-idf # "arduino" or "esp-idf"
  framework_version: recommended # or specific version like "latest", "recommended", "4.4.4"
  # framework_version: latest # or specific version like "latest", "recommended", "4.4.4"
  board_variant: "" # empty for ESP32, other values to display like c3, c6, s2, s3
  board: "esp32dev" # like: esp32dev, esp32cam, esp32-c3-devkitm-1, esp32-s3-devkitc-1, esp32-s2-saola-1, full list here https://registry.platformio.org/platforms/platformio/espressif32/boards?version=5.3.0
  flash_size: 4MB # One of 2MB, 4MB, 8MB, 16MB or 32MB
  flash_write_interval: "5min"

  devicename: esp32-xx
  updates: "30s"
  room: Room # friendly name of room to display in HA/Web
  # this is ADDITIONAL topic and sub-topic for MQTT - it publishes under <topic>/<sub-topic>/<sensor>
  # by default it's also published under <devicename>/<id_sensor>
  mqtt_location: home
  mqtt_room: room

  # default variable values for !include statements
  accuracy_decimals: "2"

  # Display setup variables
  display_xRes: "296"
  display_yRes: "128"
  display_rotation: "270"
  display_updates_interval: 1min
  display_updates_manual_cycle_delay: 5min

  run_time: 20s #needs to be as long as needed to get data
  sleep_time: 2min # normal sleep time
  away_sleep_time: 1h # sleep time when nobody's at home
  night_sleep_time: 6.5h # 1st sleep time after midnight
  refresh_interval: ${updates} #refresh when on USB power

# Override some settings included below in _board_ setup
<<: !include ../includes/time_sntp_with_sun.yaml #WARN: this is to make sunrise and sunset sensor to be updated on every time sync event
# <<: !include ../includes/mqtt_with_rtttl.yaml #WARN: override mqtt with RTTTL support if needed (buzzer and status led)
# <<: !include { file: ../includes/logger_level.yaml, vars: { level: DEBUG, baud_rate: 115200 } } #WARN: override default log level to specific one
# <<: !include { file: ../includes/logger_level.yaml, vars: { level: VERY_VERBOSE, baud_rate: 115200 } } #WARN: override default log level to specific one
# <<: !include ../includes/wifi_outside.yaml #WARN: override wifi to connect to outside network instead of default
# <<: !include { file: ../includes/wifi_main.yaml, vars: { } } #WARN: override wifi to connect to extended network instead of default
# <<: !include { file: ../includes/wifi_extended.yaml, vars: { } } #WARN: override wifi to connect to extended network instead of default
# <<: !include { file: ../includes/wifi_extended2.yaml, vars: { } } #WARN: override wifi to connect to extended network instead of default
# <<: !include ../includes/api_services.yaml #WARN: this is to expose services like scan_wifi (results in scan_results sensor)

# Include basics of a board
# <<: !include ../includes/board_esp32__water_pump.yaml
<<: !include ../includes/board_esp32.yaml
# <<: !include { file: ../../includes/board_esp32.yaml, vars: { board_variant: "${board_variant}", board: "${board}", flash_size: "${flash_size}", flash_write_interval: "${flash_write_interval}" } }
# <<: !include { file: ../../includes/psram.yaml, vars: { mode: "quad" } } # "quad' for 2MB, "octal" for 4-8MB PSRAM
<<: !include ../includes/qr_guestwifi.yaml
<<: !include ../includes/globals_display_cycle.yaml #! do not enable for board_esp32__water_pump.yaml

# Include interfaces needed
<<: !include { file: ../interfaces/debug.yaml, vars: { update_interval: "5s" } }
# <<: !include { file: ../interfaces/i2c.yaml, vars: { bus_id: "bus_a", sda: "GPIO21", scl: "GPIO22" } }
# <<: !include { file: ../interfaces/i2c.yaml, vars: { bus_id: "bus_b", sda: "GPIO14", scl: "GPIO15" } }
# <<: !include { file: ../interfaces/dallas.yaml, vars: { gpio: "GPIO10" } }
# <<: !include { file: ../interfaces/rtttl.yaml, vars: { ix: "" } }

text_sensor:
  - !include ../sensors/text_uptime.yaml
  - !include ../sensors/text_uptime_boot.yaml
  - !include ../sensors/text_version.yaml
  - !include ../sensors/text_wifi_info.yaml

  # DEBUG component
  - !include ../sensors/text_debug.yaml

  # Sun component
  - !include ../sensors/text_sun_sunrise.yaml
  - !include ../sensors/text_sun_sunset.yaml
  - !include ../sensors/text_sun_time_of_day.yaml
  - !include ../sensors/text_sun_direction.yaml

binary_sensor:
  # HA Connected
  - !include ../sensors/binary_ha_connected.yaml

  # # Physical buttons
  # - !include { file: ../sensors/binary_display_button.yaml, vars: { ix: "Refresh", gpio: "GPIO39" } }
  # - !include { file: ../sensors/binary_display_button.yaml, vars: { ix: "Next", gpio: "GPIO34" } }
  # - !include { file: ../sensors/binary_display_button.yaml, vars: { ix: "Prev", gpio: "GPIO35" } }

sensor:
  - !include ../sensors/temp_internal.yaml
  - !include ../sensors/uptime.yaml
  - !include ../sensors/uptime_boot.yaml
  - !include ../sensors/wifi_signal.yaml
  - !include ../sensors/wifi_strength.yaml

  # DEBUG component
  - !include ../sensors/debug.yaml
  # - !include ../sensors/debug_with_psram.yaml

  # Sun component
  - !include ../sensors/sun_elevation.yaml
  - !include ../sensors/sun_azimuth.yaml

  # Temperature and Humidity sensor
  # - !include { file: ../sensors/temp_hum_SHT3x.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x44" } }

  # Illuminance sensor
  # - !include { file: ../sensors/lux_BH1750.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x23", updates: "${display_updates_interval" } }

  # Various MQTT sensors
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/entrance/temperature", id: "temp_entrance", name: "Temperature Entrance", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/upstairs/temperature", id: "temp_upstairs", name: "Temperature Upstairs", unit: "°C", mdi_icon: "thermometer" } }

  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature", id: "temp_underfloor", name: "Temperature Underfloor", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature_Dwall", id: "temp_underfloorW", name: "Temperature Underfloor Wall", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature_Dboiler", id: "temp_underfloorB", name: "Temperature Underfloor Boiler", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/aquarium_window/temperature", id: "temp_aquariumW", name: "Temperature Aquarium Window", unit: "°C", mdi_icon: "thermometer" } }

  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/entrance/humidity", id: "hum_entrance", name: "Humidity Entrance", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/upstairs/humidity", id: "hum_upstairs", name: "Humidity Upstairs", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/humidity", id: "hum_underfloor", name: "Humidity Underfloor", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/aquarium_window/humidity", id: "hum_aquariumW", name: "Humidity Aquarium Window", unit: "%", mdi_icon: "water-percent" } }

  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/garage/illuminance", id: "lux_garage", name: "Garage Illuminance", unit: "lx", mdi_icon: "decagram-outline", accuracy_decimals: 1 } }

  # Pump sensors
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/pump/temperature", id: "temp_pump", name: "Pump Temperature", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/pump/temperature_Floor", id: "temp_pumpFloor", name: "Pump Temperature Floor", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/pump/humidity", id: "hum_pump", name: "Pump Humidity", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/pump/water_used_all", id: "water_used_all", name: "Pump Water Total", unit: "m³", mdi_icon: "water-plus", accuracy_decimals: 3 } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/pump/water_used_home", id: "water_used_home", name: "Pump Water Home", unit: "m³", mdi_icon: "water-plus", accuracy_decimals: 3 } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/pump/water_used_garden", id: "water_used_garden", name: "Pump Water Garden", unit: "m³", mdi_icon: "water-plus", accuracy_decimals: 3 } }

    # on_value: # Actions to perform once data for the last sensor has been received
    #   then:
    #     - script.execute: all_data_received

# switch:
#   # Restart button
#   - !include ../switches/platform_restart.yaml

button:
  # Restart, reset and shutdown buttons
  - !include { file: ../buttons/restart_button.yaml }
  # for _dev.yaml scripts include additional buttons
  - !include { file: ../buttons/safe_mode_restart_button.yaml }
  - !include { file: ../buttons/factory_reset_button.yaml }
  - !include { file: ../buttons/shutdown_button.yaml }

  # Scan Wifi button (require wifi_info text sensor to be present to display results)
  # WARN: Performing the scan will disconnect device from current WiFi
  - !include { file: ../buttons/scan_wifi_button.yaml }

  # display buttons
  - !include { file: ../buttons/display_button.yaml, vars: { ix: "Refresh", display_id: "weact_display", command: "", mdi_icon: "refresh" } }
  - !include { file: ../buttons/display_button.yaml, vars: { ix: "Next", display_id: "weact_display", command: "next", mdi_icon: "page-next" } }
  - !include { file: ../buttons/display_button.yaml, vars: { ix: "Prev", display_id: "weact_display", command: "previous", mdi_icon: "page-previous" } }
  - !include { file: ../buttons/display_page_button.yaml, vars: { page_ix: "blank", display_id: "weact_display" } }

  # - platform: template
  #   name: "${devicename} Refresh"
  #   icon: "mdi:update"
  #   on_press:
  #     then:
  #     - component.update: t5_display

# deep_sleep:
#   run_duration: ${run_time}
#   sleep_duration: ${sleep_time}
#   id: deep_sleep_1
#   esp32_ext1_wakeup:
#     pins: GPIO39
#     mode: ALL_LOW

# Include fonts for display
<<: !include ../fonts/fonts_weeact_display.yaml

# Scripts
<<: !include { file: ../scripts/interval_display_cycle_pages.yaml, vars: { display_id: weact_display, cycle_script: cycle_pages_in_day, page_to_skip: page_wifi_qr } }

# external_components:
#   # - source: github://pr#4579
#   #   components: [waveshare_epaper]
#   - source: github://pr#6226
#     components: [waveshare_epaper]

spi:
  id: spi_v
  clk_pin: GPIO18 # SCL
  mosi_pin: GPIO23 # SDA

display:
  - platform: waveshare_epaper
    # model: 2.90inbs
    model: 2.90in-bv3
    id: weact_display
    cs_pin: GPIO25 # 16
    busy_pin: GPIO5
    reset_pin: GPIO14 # 17
    dc_pin: GPIO19
    rotation: ${display_rotation}
    # full_update_every: 10
    update_interval: never

    pages:
      - id: page_blank
        lambda: |-
          // Blanl Page
          int x, y;
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}
          //draw clear background
          it.filled_rectangle(0, 0, xRes, yRes, COLOR_OFF);
          //it.print(xRes/2, yRes/2, id(size_14_font), COLOR_ON, TextAlign::CENTER, "Refreshing...");

      - id: page_time
        lambda: |-
          // Date & Time Page
          int x, y;
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}

          //sun set-rise
          it.printf(45, 22, id(sun_icon_font), TextAlign::BASELINE_RIGHT, "\U000F059C");
          it.printf(135, 22, id(size_20_font), TextAlign::BASELINE_RIGHT, "%s", id(sunrise).state.c_str());
          it.printf(45, 44, id(sun_icon_font), TextAlign::BASELINE_RIGHT, "\U000F059A");
          it.printf(135, 44, id(size_20_font), TextAlign::BASELINE_RIGHT, "%s", id(sunset).state.c_str());
          //date

          it.strftime(210, 43, id(size_50_font), TextAlign::BASELINE_RIGHT, "%d", id(sntp_time).now());
          it.printf(213, 43, id(size_14_font), TextAlign::BASELINE_LEFT, "D");
          it.strftime(280, 43, id(size_50_font), TextAlign::BASELINE_RIGHT, "%m", id(sntp_time).now());
          it.printf(283, 43, id(size_14_font), TextAlign::BASELINE_LEFT, "M");

          //line
          it.line(0, 54, 296, 54);

          //Time
          it.strftime(20, 45, id(size_85_font), "%H:%M", id(sntp_time).now());
          /* it.strftime(225, 68, id(size_60_font), "%S", id(sntp_time).now()); */

          it.strftime(250, 58, id(size_20_font), "%a", id(sntp_time).now());

          //wifi
          if (id(wifi_rssi).has_state()) {
            x = 265, y = 120;
            if (id(wifi_rssi).state >= -50) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_CENTER , "\U000F0928");
            } else if (id(wifi_rssi).state >= -60) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_CENTER , "\U000F0925");
            } else if (id(wifi_rssi).state >= -70) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_CENTER , "\U000F0922");
            } else if (id(wifi_rssi).state >= -80) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_CENTER , "\U000F0920");
            } else {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_CENTER , "\U000F092E");
            }
          }

      - id: page_home_temps
        lambda: |-
          // Main Home Temperatures and Humidity Page
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}
          int x, y;

          //* Temperature
          x = 24; y = 64;
          it.printf(x, y-12, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F0F55");

          // Entrance
          x = 70; y = 30;
          it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F081A");
          if (id(temp_entrance).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(temp_entrance).state);
            // it.printf(x+74, y, id(size_20_font), TextAlign::BASELINE_LEFT , "°");
            // it.printf(x+80, y, id(size_20_font), TextAlign::BASELINE_LEFT , "C");
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
          }

          // Upstairs
          x = 200; y = 30;
          it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F12BD");
          if (id(temp_upstairs).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(temp_upstairs).state);
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
          }

          // Underfloor
          x = 70; y = 60;
          it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F0DD3");
          if (id(temp_underfloor).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(temp_underfloor).state);
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
          }

          // Aquarium Window
          x = 200; y = 60;
          it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F112B");
          if (id(temp_aquariumW).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(temp_aquariumW).state);
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
          }

          //line
          it.line(0, 64, 296, 64);

          //* Humidity
          x = 24; y = 128;
          it.printf(x, y-12, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F058E");

          // Entrance
          x = 70; y = 94;
          it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F081A");
          if (id(hum_entrance).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(hum_entrance).state);
            // it.printf(x+74, y, id(size_20_font), TextAlign::BASELINE_LEFT , "°");
            // it.printf(x+80, y, id(size_20_font), TextAlign::BASELINE_LEFT , "C");
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
          }

          // Upstairs
          x = 200; y = 94;
          it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F12BD");
          if (id(hum_upstairs).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(hum_upstairs).state);
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
          }

          // Underfloor
          x = 70; y = 124;
          it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F0DD3");
          if (id(hum_underfloor).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(hum_underfloor).state);
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
          }

          // Aquarium Window
          x = 200; y = 124;
          it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F112B");
          if (id(hum_aquariumW).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(hum_aquariumW).state);
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
          }

      - id: page_pump_temps
        lambda: |-
          // Pump Temperatures and Humidity Page
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}
          int x, y;

          //* Pump Temperatures
          x = 148; y = 18;
          it.printf(x, y, id(size_15_font), TextAlign::BASELINE_CENTER , "PUMP Temperatures");

          //* Temperature
          x = 20; y = 64;
          it.printf(x, y-12, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F050F");

          // Pump
          x = 70; y = 60;
          // it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F06D9");
          if (id(temp_pump).has_state()) {
            it.printf(x+70, y, id(size_50_font), TextAlign::BASELINE_RIGHT , "%.1f", id(temp_pump).state);
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
          }

          // Pump Floor
          x = 200; y = 60;
          // it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F058F");
          if (id(temp_pumpFloor).has_state()) {
            it.printf(x+70, y, id(size_50_font), TextAlign::BASELINE_RIGHT , "%.1f", id(temp_pumpFloor).state);
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
          }

          //line
          it.line(0, 63, 296, 63);

          //* Pump Humidity and Illuminance
          x = 148; y = 64+18;
          it.printf(x, y, id(size_15_font), TextAlign::BASELINE_CENTER , "PUMP Humidity and Illuminance");

          //* Humidity
          x = 20; y = 128;
          it.printf(x, y-12, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F058E");

          x = 70; y = 124;
          // it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F058F");
          if (id(hum_pump).has_state() and not isnan(id(hum_pump).state)) {
            it.printf(x+70, y, id(size_50_font), TextAlign::BASELINE_RIGHT , "%.1f", id(hum_pump).state);
            // it.printf(x+74, y, id(size_20_font), TextAlign::BASELINE_LEFT , "°");
            // it.printf(x+80, y, id(size_20_font), TextAlign::BASELINE_LEFT , "C");
            it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
          }

          //* Illuminance
          // x = 148+24; y = 128;
          // it.printf(x, y-12, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F17FE");

          x = 200; y = 124;
          // it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F058F");
          if (id(lux_garage).has_state() and not isnan(id(lux_garage).state)) {
            if(int(id(lux_garage).state) < 99) {
              it.printf(x+70, y, id(size_50_font), TextAlign::BASELINE_RIGHT , "%.1f", id(lux_garage).state);
            } else {
              if(int(id(lux_garage).state) > 9999) {
                it.printf(x+70, y, id(size_50_font), TextAlign::BASELINE_RIGHT , "%.0fK", id(lux_garage).state / 1000);
              } else {
                it.printf(x+70, y, id(size_50_font), TextAlign::BASELINE_RIGHT , "%.0f", id(lux_garage).state);
              }
            }
            // it.printf(x+70, y, id(size_50_font), TextAlign::BASELINE_RIGHT , "%.1f", id(lux_garage).state);
            it.printf(x+74, y, id(size_20_font), TextAlign::BASELINE_LEFT , "LX");
            // it.printf(x+80, y, id(size_20_font), TextAlign::BASELINE_LEFT , "C");
          }

      - id: page_water
        lambda: |-
          // Water
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}
          int x, y;

          //* Pump Water
          x = 148; y = 18;
          it.printf(x, y, id(size_15_font), TextAlign::BASELINE_CENTER , "WATER Used");

          //* Water
          x = 20; y = 64;
          it.printf(x, y-12, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F058F");

          // All Used
          x = 170; y = 60;
          // it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F06D9");
          if (id(water_used_all).has_state()) {
            it.printf(x+70, y, id(size_40_font), TextAlign::BASELINE_RIGHT , "%.3f", id(water_used_all).state);
            it.printf(x+74, y-4, id(size_20_font), TextAlign::BASELINE_LEFT , "M");
            it.printf(x+94, y-12, id(size_12_font), TextAlign::BASELINE_LEFT , "3");
          }

          //line
          it.line(70, 64, 296, 64);

          // Home Used
          x = 284; y = 94;
          it.printf(x, y-2, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F06A1");

          x = 170; y = 94;
          if (id(water_used_home).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.3f", id(water_used_home).state);
            it.printf(x+74, y-4, id(size_20_font), TextAlign::BASELINE_LEFT , "M");
            it.printf(x+94, y-12, id(size_12_font), TextAlign::BASELINE_LEFT , "3");
          }

          // Garden Used
          x = 284; y = 128;
          it.printf(x, y-2, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F09F2");

          x = 170; y = 128;
          if (id(water_used_garden).has_state()) {
            it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.3f", id(water_used_garden).state);
            it.printf(x+74, y-4, id(size_20_font), TextAlign::BASELINE_LEFT , "M");
            it.printf(x+94, y-12, id(size_12_font), TextAlign::BASELINE_LEFT , "3");
          }

      - id: page_wifi_qr
        lambda: |-
          // QR Code for Guest WiFi
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}
          #define xCenter (xRes/2 + 40) // X position center
          //id(t5_display).clear();
          it.print(10, 20, id(size_14_font), TextAlign::BASELINE_LEFT, "Join Guest WIFI");
          // it.print(xRes - 40, yRes - 40, id(font_small), TextAlign::BASELINE_LEFT, "5");
          // guest wifi
          // WIFI:S:<WIFI NAME HERE>;T:WPA;P:<WIFI PASSWOD HERE>;H:false;;
          // Draw the QR-code at position [x=120,y=5] with white color and a 4x scale
          it.qr_code(120, 5, id(guestwifi_qr), COLOR_ON, 4);
