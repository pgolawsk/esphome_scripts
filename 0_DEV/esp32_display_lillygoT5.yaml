---
#* ESP32 LillyGo T5 4.7 display
#* Please read README.md for details
#* For pinout see: file://../pinouts/LILYGO_T5_4.7_ePaper.jpg
###
# Pawelo 20230308, created based on https://github.com/danuw/esphome-configs/blob/epd-multipage/epd47-1.yaml
# Pawelo 20230310, added battery sensor based on https://github.com/esphome/feature-requests/issues/1109#issuecomment-1408376503
# Pawelo 20230923, 1.1.5, added HA Connected binary sensor
# Pawelo 20231006, 1.1.5, added display variables
# Pawelo 20240628, 1.1.5, move fonts to separate include file
# Pawelo, 20241222, include first OVERRIDEs and then BOARD itself
# Pawelo, 20241222, cleanup of old/unused mqtt commented code
# Pawelo, 20241222, added wifi strength sensor and wifi_scan button
# Pawelo, 20241222, added debug component and sensors
# Pawelo, 20241222, added factory_reset, safe_restart and shutdown buttons
# Pawelo, 20241222, added PSRAM support (includes/ and debug_with_psram sensor)
# Pawelo, 20241222, changed to use includes/board_esp32.yaml with variables
# Pawelo, 20250109, added option to select desired framework_type (for board include)
# Pawelo, 20250130, added framework_version variable
# Pawelo, 20250202, moved to 0_DEV folder
# Pawelo, 20250221, added uptime_boot text sensor

#TODO: good example to deep_sleep: https://gist.github.com/Plawasan/8e27956db016eb5158311b94d096509b
#                                  https://gist.github.com/Plawasan/4ae826b05aaa7812f3a191714ca47a50
#                                  https://pastebin.com/Yd7xhtCQ
#
#! run with this command to override substitutions
# esphome -s devicename espXX -s updates 1min -s room <Room name> -s mqtt_room <room> run esp32_MMmm_SSss__PP.yaml --device 192.168.x.x
# here are default values if those are not given via command line

substitutions:
#  devices: "Temperature and Humidity via SHTx30 and Illuminance via BH1750"
  devices: "T5 Display and MQTT sensors"
  project_name: "pgolawsk.esp_home"
  version: "20250221"

  # required by ../includes/board_esp32.yaml script
  framework_type: arduino # "arduino" or "esp-idf"
  # framework_type: esp-idf # "arduino" or "esp-idf"
  framework_version: recommended # or specific version like "latest", "recommended", "4.4.4"
  # framework_version: latest # or specific version like "latest", "recommended", "4.4.4"
  board_variant: "" # empty for ESP32, other values to display like c3, c6, s2, s3
  board: "esp32dev" # like: esp32dev, esp32cam, esp32-c3-devkitm-1, esp32-s3-devkitc-1, esp32-s2-saola-1, full list here https://registry.platformio.org/platforms/platformio/espressif32/boards?version=5.3.0
  flash_size: 16MB # One of 2MB, 4MB, 8MB, 16MB or 32MB
  flash_write_interval: "5min"

  devicename: esp32-xx
  updates: "30s"
  room: Room # friendly name of room to display in HA/Web
  # this is ADDITIONAL topic and sub-topic for MQTT - it publishes under <topic>/<sub-topic>/<sensor>
  # by default it's also published under <devicename>/<id_sensor>
  mqtt_location: home
  mqtt_room: room

  # default variable values for !include statements
  accuracy_decimals: "2"

  # Display setup variables
  display_xRes: "960"
  display_yRes: "540"
  display_rotation: "180"
  display_updates_interval: ${updates}
  display_updates_manual_cycle_delay: 5min

  run_time: 20s #needs to be as long as needed to get data
  sleep_time: 2min # normal sleep time
  away_sleep_time: 1h # sleep time when nobody's at home
  night_sleep_time: 6.5h # 1st sleep time after midnight
  refresh_interval: ${updates} #refresh when on USB power

# Override some settings included below in _board_ setup
<<: !include ../includes/time_sntp_with_sun.yaml #WARN: this is to make sunrise and sunset sensor to be updated on every time sync event
# <<: !include includes/mqtt_with_rtttl.yaml #WARN: override mqtt with RTTTL support if needed (buzzer and status led)
# <<: !include { file: ../includes/logger_level.yaml, vars: { level: DEBUG, baud_rate: 115200 } } #WARN: override default log level to specific one
# <<: !include { file: ../includes/logger_level.yaml, vars: { level: VERY_VERBOSE, baud_rate: 115200 } } #WARN: override default log level to specific one
# <<: !include ../includes/wifi_outside.yaml #WARN: override wifi to connect to outside network instead of default
# <<: !include { file: ../includes/wifi_main.yaml, vars: { } } #WARN: override wifi to connect to extended network instead of default
# <<: !include { file: ../includes/wifi_extended.yaml, vars: { } } #WARN: override wifi to connect to extended network instead of default
# <<: !include { file: ../includes/wifi_extended2.yaml, vars: { } } #WARN: override wifi to connect to extended network instead of default
# <<: !include ../includes/api_services.yaml #WARN: this is to expose services like scan_wifi (results in scan_results sensor)

# Include basics of a board
# <<: !include { file: ../includes/board_esp32.yaml, vars: { board_variant: "${board_variant}", board: "${board}", flash_size: "${flash_size}", flash_write_interval: "${flash_write_interval}" } }
<<: !include { file: ../includes/board_esp32.yaml, vars: {} }
# <<: !include { file: ../includes/psram.yaml, vars: { mode: "quad" } } # "quad' for 2MB, "octal" for 4-8MB PSRAM
<<: !include { file: ../includes/psram.yaml, vars: { mode: "octal" } } # "quad' for 2MB, "octal" for 4-8MB PSRAM
<<: !include ../includes/qr_guestwifi.yaml
<<: !include ../includes/globals_display_cycle.yaml #! do not enable for board_esp32__water_pump.yaml

# Include interfaces needed
<<: !include { file: ../interfaces/debug.yaml, vars: { update_interval: "5s" } }
# <<: !include { file: ../interfaces/i2c.yaml, vars: { bus_id: "bus_a", sda: "GPIO12", scl: "GPIO13" } }
# <<: !include { file: ../interfaces/i2c.yaml, vars: { bus_id: "bus_b", sda: "GPIO14", scl: "GPIO15" } }
# <<: !include { file: ../interfaces/dallas.yaml, vars: { gpio: "GPIO10" } }
# <<: !include { file: ../interfaces/rtttl.yaml, vars: { ix: "" } }

text_sensor:
  - !include ../sensors/text_uptime.yaml
  - !include ../sensors/text_uptime_boot.yaml
  - !include ../sensors/text_version.yaml
  - !include ../sensors/text_wifi_info.yaml

  # DEBUG component
  - !include ../sensors/text_debug.yaml

  # Sun component
  # - !include { file: ../sensors/text_sun_sunrise.yaml, vars: { updates: "${updates}" } }
  # - !include { file: ../sensors/text_sun_sunset.yaml, vars: { updates: "${updates}" } }
  - !include ../sensors/text_sun_sunrise.yaml
  - !include ../sensors/text_sun_sunset.yaml
  - !include ../sensors/text_sun_time_of_day.yaml
  - !include ../sensors/text_sun_direction.yaml

  # Powered From sensor
  - !include { file: ../sensors/text_powered_from_lilygo_T5_47.yaml, vars: { ix: "", usb_threshold_voltage: 4.5 } } # below threshold voltage its is BATERY, above it's USB

binary_sensor:
  # HA Connected
  - !include ../sensors/binary_ha_connected.yaml

  # LilyGo buttons
  - !include { file: ../sensors/binary_display_button.yaml, vars: { ix: "Refresh", gpio: "GPIO39" } }
  - !include { file: ../sensors/binary_display_button.yaml, vars: { ix: "Next", gpio: "GPIO34" } }
  - !include { file: ../sensors/binary_display_button.yaml, vars: { ix: "Prev", gpio: "GPIO35" } }

sensor:
  - !include ../sensors/temp_internal.yaml
  - !include ../sensors/uptime.yaml
  - !include ../sensors/uptime_boot.yaml
  - !include ../sensors/wifi_signal.yaml
  - !include ../sensors/wifi_strength.yaml

  # DEBUG component
  # - !include ../sensors/debug.yaml
  - !include ../sensors/debug_with_psram.yaml

  # Sun component
  - !include ../sensors/sun_elevation.yaml
  - !include ../sensors/sun_azimuth.yaml

  # Temperature and Humidity sensor
  # - !include { file: ../sensors/temp_hum_SHT3x.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x44" } }

  # Illuminance sensor
  # - !include { file: ../sensors/lux_BH1750.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x23", updates: "${display_updates_interval" } }

  # Various MQTT sensors
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/entrance/temperature", id: "temp_entrance", name: "Temperature Entrance", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/upstairs/temperature", id: "temp_upstairs", name: "Temperature Upstairs", unit: "°C", mdi_icon: "thermometer" } }

  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature", id: "temp_underfloor", name: "Temperature Underfloor", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature_Dwall", id: "temp_underfloorW", name: "Temperature Underfloor Wall", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature_Dboiler", id: "temp_underfloorB", name: "Temperature Underfloor Boiler", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/aquarium_window/temperature", id: "temp_aquariumW", name: "Temperature Aquarium Window", unit: "°C", mdi_icon: "thermometer" } }

  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/entrance/humidity", id: "hum_entrance", name: "Humidity Entrance", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/upstairs/humidity", id: "hum_upstairs", name: "Humidity Upstairs", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/humidity", id: "hum_underfloor", name: "Humidity Underfloor", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: ../sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/aquarium_window/humidity", id: "hum_aquariumW", name: "Humidity Aquarium Window", unit: "%", mdi_icon: "water-percent" } }

  # Battery voltage sensor
  - !include { file: ../sensors/voltage_battery_lilygo_T5_47.yaml, vars: { ix: "" } }
  - !include { file: ../sensors/percentage_battery_lilygo_T5_47.yaml, vars: { ix: "", max_voltage: 4.22, min_voltage: 3.35 } }

    # on_value: # Actions to perform once data for the last sensor has been received
    #   then:
    #     - script.execute: all_data_received

# switch:
#   # Restart button
#   - !include ../switches/platform_restart.yaml

button:
  # Restart, reset and shutdown buttons
  - !include { file: ../buttons/restart_button.yaml }
  # for _dev.yaml scripts include additional buttons
  - !include { file: ../buttons/safe_mode_restart_button.yaml }
  - !include { file: ../buttons/factory_reset_button.yaml }
  - !include { file: ../buttons/shutdown_button.yaml }

  # Scan Wifi button (require wifi_info text sensor to be present to display results)
  # WARN: Performing the scan will disconnect device from current WiFi
  - !include { file: ../buttons/scan_wifi_button.yaml }

  # display buttons
  - !include { file: ../buttons/display_button.yaml, vars: { ix: "Refresh", display_id: "lt5_display", command: "", mdi_icon: "refresh" } }
  - !include { file: ../buttons/display_button.yaml, vars: { ix: "Next", display_id: "lt5_display", command: "next", mdi_icon: "page-next" } }
  - !include { file: ../buttons/display_button.yaml, vars: { ix: "Prev", display_id: "lt5_display", command: "previous", mdi_icon: "page-previous" } }

  # - platform: template
  #   name: "${devicename} Refresh"
  #   icon: "mdi:update"
  #   on_press:
  #     then:
  #     - component.update: t5_display

# deep_sleep:
#   run_duration: ${run_time}
#   sleep_duration: ${sleep_time}
#   id: deep_sleep_1
#   esp32_ext1_wakeup:
#     pins: GPIO39
#     mode: ALL_LOW

# external_components:
#   - source: github://ashald/esphome@lilygo-t5-47
#     components:
#       - lilygo_t5_47

external_components:
  - source: github://daernsinstantfortress/esphome-lilygo-t5-47@lilygo-t5-47
    components:
      - lilygo_t5_47

# This is ESP32S3 variant, not ESP32
# external_components:
#   - source: github://nickolay/esphome-lilygo-t547plus
#     components: ["t547"]

#   - source: github://kaeltis/esphome-lilygo-t547plus
#     components: ["lilygo_t5_47_battery"]

# Include fonts for display
<<: !include ../fonts/fonts_lillygoT5_display.yaml

# Scripts
<<: !include { file: ../scripts/interval_display_cycle_pages.yaml, vars: { display_id: lt5_display, cycle_script: cycle_pages_in_day, page_to_skip: page_wifi_qr } }

# script:
#   - id: refresh_display
#     then:
#       - repeat:
#           count: 1
#           then:
#           - display.page.show: black
#           - component.update: t5_display
#           - display.page.show: blank
#           - component.update: t5_display
#           - display.page.show: main
#           - component.update: t5_display

#   - id: all_data_received
#     mode: restart
#     then:
#       - component.update: batt_volt
#       - component.update: batt
#       - display.page.show: main
#       - component.update: t5_display
#       - if:
#           condition:
#             lambda: |-
#               if (id(batt_volt).state > 4.5) {
#                 return false;
#               }
#               return true;
#           then:
#             - script.execute: enter_sleep
#           else:
#             - logger.log: "On USB power, preventing deep sleep"
#             - deep_sleep.prevent: deep_sleep_1
#             - delay: ${updates}
#             - script.execute: all_data_received

#   - id: enter_night_sleep
#     then:
#       - logger.log: "It's nighttime, entering night sleep for ${night_sleep_time}"
#       - deep_sleep.enter:
#           id: deep_sleep_1
#           sleep_duration: ${night_sleep_time}

#   - id: enter_normal_sleep
#     then:
#       - if:
#           condition:
#             lambda: |-
#               // if (id(adults).state == "not_home") {
#               //   return false;
#               // }
#               return true;
#           then:
#             - logger.log: "It's daytime and people are home, entering short sleep for ${sleep_time}"
#             - deep_sleep.enter:
#                 id: deep_sleep_1
#                 sleep_duration: ${sleep_time}
#           else:
#             - logger.log: "It's daytime but nobody's home, entering sleep for ${away_sleep_time}"
#             - deep_sleep.enter:
#                 id: deep_sleep_1
#                 sleep_duration: ${away_sleep_time}

#   - id: enter_sleep
#     then:
#       - if:
#           condition:
#             lambda: |-
#               auto time = id(sntp_time).now();
#               if (!time.is_valid()) {
#                 return false;
#               }
#               return (time.hour < 6);
#           then:
#             - script.execute: enter_night_sleep
#           else:
#             - script.execute: enter_normal_sleep

# Display
display:
  - platform: lilygo_t5_47
  # - platform: t547
    id: lt5_display
    rotation: ${display_rotation}
    update_interval: ${display_updates_interval}
    full_update_every: 1 # optional (default:  1): 0 - never, 1 (default) - every, 2+ - throttled
    cycles_render: 20    # optional (default: 20): higher number -> less ghosting, crisper image, more time
    cycles_invert: 40    # optional (default: 20): higher number -> more timef or full update, but mor burn-in protection
    # on_page_change:
    #   - then:
    #       lambda: |-
    #         id(t5_display).clear();
    pages:
      # - id: blank
      #   lambda: |-
      #     // #define xres 540
      #     // #define yres 960
      #     #define xRes 960
      #     #define yRes 540
      #     //draw clear background
      #     it.filled_rectangle(0, 0, xRes, yRes, COLOR_OFF);
      #     it.print(xRes/2, yRes/2, id(font_name), COLOR_ON, TextAlign::CENTER, "Refreshing...");

      # - id: black
      #   lambda: |-
      #     // #define xres 540
      #     // #define yres 960
      #     #define xRes 960
      #     #define yRes 540
      #     //draw filled background
      #     it.filled_rectangle(0, 0, xRes, yRes, COLOR_ON);
      #     it.print(xRes/2, yRes/2, id(font_name), COLOR_OFF, TextAlign::CENTER, "Refreshing...");

      - id: page_blank
        lambda: |-
          // positioning constants
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}
          #define xCenter (xRes/2 + 40) // X position center
          id(lt5_display).clear();
      - id: page_time
        lambda: |-
          // positioning constants
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}
          #define xCenter (xRes/2 + 40) // X position center
          //id(t5_display).clear();
          it.strftime(15, 310, id(font_big), TextAlign::BASELINE_LEFT, "%H:%M", id(sntp_time).now());
          it.strftime(50, 500, id(font_med), TextAlign::BASELINE_LEFT, "%Y-%m-%d %a", id(sntp_time).now());
          it.print(xRes - 40, yRes - 40, id(font_small), TextAlign::BOTTOM_LEFT, "1");
      - id: page_time_with_sun
        lambda: |-
          // positioning constants
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}
          #define xCenter (xRes/2 + 40) // X position center
          //id(t5_display).clear();
          it.strftime(xCenter + 100, 40, id(font_small), TextAlign::BASELINE_LEFT, "%Y-%m-%d %a", id(sntp_time).now());
          it.strftime(15, 310, id(font_big), TextAlign::BASELINE_LEFT, "%H:%M", id(sntp_time).now());
          it.printf(50, 380, id(font_small), TextAlign::BASELINE_LEFT, "Sunrise at %s and sunset at %s.", id(sunrise).state.c_str(), id(sunset).state.c_str());
          it.strftime(50, 500, id(font_med), TextAlign::BASELINE_LEFT, "%Y-%m-%d %a", id(sntp_time).now());
          it.print(xRes - 40, yRes - 40, id(font_small), TextAlign::BOTTOM_LEFT, "2");
      - id: page_some_text
        lambda: |-
          // positioning constants
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}
          #define xCenter (xRes/2 + 40) // X position center
          //id(t5_display).clear();
          it.fill(COLOR_ON);
          it.print(xRes - 40, yRes - 40, id(font_small), COLOR_OFF, TextAlign::BASELINE_LEFT, "3");
      - id: page4
        lambda: |-
          // positioning constants
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}
          #define xCenter (xRes/2 + 40) // X position center
          //id(t5_display).clear();
          it.fill(COLOR_ON);
          it.strftime(10, 10, id(font_small), COLOR_OFF, TextAlign::TOP_LEFT, "%H:%M", id(sntp_time).now());
          it.print(xRes - 40, yRes-40, id(font_small), COLOR_OFF, TextAlign::BASELINE_LEFT, "4");
          /// Multiline text from https://community.home-assistant.io/t/eink-multi-line-text/255814/8
          std::string s = "Some really interesting quote over multiple lines centered on the page - by Author";//id(weather).state;
          int limit = 35;
          int space = 0;
          int i = 0;
          int line = 0;
          int y= 70; // start Y
          while(i<s.length()){ //loop through string, counting all the spaces, and replacing the last one with ~ [marked by space variable] if the count exceeds limit of 35
            if(s.substr(i,1) == " "){space = i; }
            if(line>limit-1){s=s.substr(0,space)+"~"+s.substr(space+1);line = 0;}
              i++;line++;
          }
          size_t pos = s.find("~"); //find the first line break
          int linecount = 1; //need number of lines to store the break positions in an array
          int breakpositions[10]; //store breakpositions [the '~']
          breakpositions[0] = -1; // start at -1 cause we need to truncate the replaced characters and without this will cut off 1st character of message
          while ( pos != std::string::npos) //loop through  replacing the ~ with CR - though this doesnt matter here it will never be displayed, but need to change them to keep the loop from repeating at the start
          {
            s.replace(pos,1, "\n");
            breakpositions[linecount] = pos; //store the position of the break in an array
            pos = s.find("~"); // move forward
            linecount++; // we have a new line, count it
          }
          breakpositions[linecount] = s.length(); //set the last entry in array to the length of string for calculation below
          std::string singleline; //this will be the line we print
          i = 0;
          while (i < linecount ) {  // count through the lines
            singleline = s.substr(breakpositions[i]+1,(breakpositions[i+1]-breakpositions[i]-1)); //extract each line of text from the string - strip off the CRLF and the space.
            it.printf(xCenter, y, id(font_med2), COLOR_OFF, TextAlign::BASELINE_CENTER, "%s", singleline.c_str()); //print it!
            y=y+50; // increment y to print properly on display
            i++;
          }
          it.print(xRes - 40, yRes - 40, id(font_small), TextAlign::BASELINE_LEFT, "4");
      - id: page_wifi_qr
        lambda: |-
          // positioning constants
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}
          #define xCenter (xRes/2 + 40) // X position center
          //id(t5_display).clear();
          it.print(60, 60, id(font_small), TextAlign::BASELINE_LEFT, "Join Guest WIFI");
          it.print(xRes - 40, yRes - 40, id(font_small), TextAlign::BASELINE_LEFT, "5");
          // guest wifi
          // WIFI:S:<WIFI NAME HERE>;T:WPA;P:<WIFI PASSWOD HERE>;H:false;;
          // Draw the QR-code at position [x=50,y=100] with white color and a 14x scale
          it.qr_code(50, 100, id(guestwifi_qr), COLOR_ON, 14);

