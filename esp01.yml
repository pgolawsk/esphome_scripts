# Pawelo 20221112, created based on https://github.com/nygma2004/esphome

#! run with this command to ovveride sunstitutions
# esphome -s devicename espXX -s devicelocation KitchenXXXXXX run esp01.yml --device 192.168.x.x
# heare are default values if those are not given via command line
substitutions:
  devicename: espXX
  devicelocation: Room

esphome:
  name: $devicename
  platform: ESP8266
  board: esp12e

# Enable logging
logger:
#  level: NONE, ERROR, WARN, INFO, DEBUG (default), VERBOSE, VERY_VERBOSE
  level: INFO
  logs:
    mqtt.component: INFO
    mqtt.client: ERROR

ota:
  safe_mode: true
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: ""
  fast_connect: true

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "$devicename $devicelocation Fallback Hotspot"
    password: !secret wifi_fallback_password


# Setup for HomeAssistant
#api:
#  password: !secret api_password

captive_portal:

mqtt:
  broker: !secret mqtt_ip
  port: !secret mqtt_port
#  username: $devicename
  username: !secret mqtt_user
  password: !secret mqtt_password
  client_id: $devicename
 # id: $devicename

i2c:
  sda: 4
  scl: 5
  scan: true
  id: bus_a

text_sensor:
  - platform: template
    name: Uptime
    id: uptime_human
    icon: mdi:clock-start
    state_topic: $devicename/uptime_text

sensor:
  - platform: wifi_signal
    name: "$devicelocation WiFi Signal"
    update_interval: 30s
    state_topic: $devicename/rssi
  - platform: sht3xd
    temperature:
      name: "$devicelocation Temperature"
      state_topic: $devicename/temperature
    humidity:
      name: "$devicelocation Humidity"
      state_topic: $devicename/humidity
    address: 0x44
    update_interval: 30s
  - platform: uptime
    name: "$devicelocation Uptime Sensor"
    id: uptime_sensor
    state_topic: $devicename/uptime
    update_interval: 30s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();
    filters:
      - lambda: return x / 60;
    unit_of_measurement: "m"

web_server:
  port: 80
