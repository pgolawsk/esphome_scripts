---
#* ESP32 sensor board script name reflecting configuration esp32_MMmm_SSss__PP.yaml
#* Please read README.md for details
#? ESP32-WROOM-32 minimum wiring https://www.mischianti.org/2021/05/30/esp32-wroom-32-esp32-s-flash-pinout-specs-and-ide-configuration-1/
###
# Pawelo 20230101, 1.1.5, created based on esp12f_.yaml
# Pawelo 20230923, 1.1.5, added HA Connected binary sensor
# Pawelo 20240209, 1.1.5, added ENS160 + AHT21 support
# Pawelo 20240619, 1.1.5, added 2nd i2c support, secondary room/mqtt
# Pawelo 20240628, 1.1.5, moved filters offset adjustments for BME680 to variables
#
#! run with this command to override substitutions
# esphome -s devicename espXX -s updates 1min -s room <Room name> -s mqtt_room <room> run esp32_MMmm_SSss__PP.yaml --device 192.168.x.x
# heare are default values if those are not given via command line
substitutions:
#  devices: "Temperature and Humidity via SHTx30 and Illuminance via BH1750"
  devices: "DEV Kit with ePaper display"
  project_name: "pgolawsk.esp_home"
  version: "1.1.5"

  devicename: esp32-xx
  updates: "30s"
  room: Room # friendly name of room to display in HA/Web
  # this is ADDITIONAL topic and sub-topic for MQTT - it publishes under <topic>/<sub-topic>/<sensor>
  # by default it's also published under <devicename>/<id_sensor>
  mqtt_location: home
  mqtt_room: room
  # (optional) secondary room/mqtt
  room2: none
  mqtt_location2: none
  mqtt_room2: none

  # default variable values for !include statements
  accuracy_decimals: "2"

  # Display setup variables
  display_xRes: "128"
  display_yRes: "296"
  display_rotation: "0"
  display_updates_interval: 5s # need to be small for display manageable interval cycle
  display_updates_manual_cycle_delay: 5min

  # Include basics of a board
#<<: !include includes/board_esp32.yaml
<<: !include includes/board_esp32_with_sun.yaml
# Include/Override mqtt with/without RTTTL support if needed
<<: !include includes/mqtt.yaml
#<<: !include includes/mqtt_with_rtttl.yaml

# Include interfaces needed
# <<: !include { file: interfaces/i2c.yaml, vars: { bus_id: "bus_a", sda: "GPIO21", scl: "GPIO22" } }
# note: when more i2c interfaces are needed then need to include those separately
i2c:
  - !include { file: interfaces/i2c__include.yaml, vars: { bus_id: "bus_a", sda: "GPIO21", scl: "GPIO22" } }
  - !include { file: interfaces/i2c__include.yaml, vars: { bus_id: "bus_b", sda: "GPIO17", scl: "GPIO18" } }
# <<: !include { file: interfaces/dallas.yaml, vars: { gpio: "GPIO10" } }
<<: !include { file: interfaces/rtttl.yaml, vars: { ix: "" } }
<<: !include includes/qr_guestwifi.yaml

# # reinclude MQTT as a bug in ESPHOME, see: https://github.com/esphome/issues/issues/2180, https://github.com/esphome/issues/issues/1487
# mqtt:
#   broker: !secret mqtt_ip
#   port: !secret mqtt_port
# #  username: $devicename
#   username: !secret mqtt_user
#   password: !secret mqtt_password
#   client_id: $devicename
# # id: $devicename

text_sensor:
  - !include sensors/text_uptime.yaml
  - !include sensors/text_version.yaml
  - !include sensors/text_wifi_info.yaml

  # Sun component
  - !include sensors/text_sun_sunrise.yaml
  - !include sensors/text_sun_sunset.yaml
  - !include sensors/text_sun_time_of_day.yaml
  - !include sensors/text_sun_direction.yaml

  # Air Quality sensor
  # - !include { file: sensors/text_air_quality.yaml }

binary_sensor:
  # HA Connected
  - !include sensors/binary_ha_connected.yaml

sensor:
  - !include sensors/temp_internal.yaml
  - !include sensors/uptime.yaml
  - !include sensors/wifi_signal.yaml

  # Sun component
  - !include sensors/sun_elevation.yaml
  - !include sensors/sun_azimuth.yaml

  # Temperature and Humidity sensor
#  - !include { file: sensors/temp_hum_SHT3x.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x44" } }
  - !include { file: sensors/temp_hum_SHT4x.yaml, vars: { ix: "2", bus_id: "bus_b", address: "0x44", room: "${room2}", mqtt_location: "${mqtt_location2}", mqtt_room: "${mqtt_room2}" } }
  # - !include { file: sensors/temp_hum_AHT2x.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x38" } }

  # Temperature, Humidity and Pressure seensor
  # - !include { file: sensors/temp_hum_press_BME280.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x76" } }

  # Temperature, Humidity, Pressure and Gas Resistance seensor
  - !include { file: sensors/temp_hum_press_gas_BME680.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x77", temp_offset: 0.2, hum_offset: 5.2, pressure_offset: 5.7 } }

  # Illuminance sensor
  - !include { file: sensors/lux_BH1750.yaml, vars: { ix: "2", bus_id: "bus_b", address: "0x23", room: "${room2}", mqtt_location: "${mqtt_location2}", mqtt_room: "${mqtt_room2}"  } }
  # - !include { file: sensors/lux_color_TCS3472.yaml, vars: { ix: "2", bus_id: "bus_a", address: "0x29" } }
  - !include { file: sensors/lux_uv_ltr390.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x53" } }

  # TVOC and eCO2 sensor
  # - !include { file: sensors/tvoc_eco2_SGP30.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x58" } }
  # - !include { file: sensors/tvoc_eco2_ENS160.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x53" } }

  # Distance sensor
  # - !include { file: sensors/distance_hc-sr04.yaml, vars: { ix: "", room: "Pellet", trigger_pin: "GPIO18", echo_pin: "GPIO17", updates: "5s" } }
  # - !include { file: sensors/distance_vl53L0x.yaml, vars: { ix: "", room: "Pellet", bus_id: "bus_a", address: "0x29", updates: "5s", offset_filter: -0.05 } }
  # - !include { file: sensors/percentage_distance.yaml, vars: { ix: "", thing: "Pellet", full_distance: "0.1", empty_distance: "0.6", updates: "5s" } }

  # DC Current, Power, Voltage
  # - !include { file: sensors/current_power_voltage_INA226.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x40", max_current: "1.2A" } }
  # - !include { file: sensors/current_power_voltage_INA3221.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x40" } }

  # Color and Proximity
  # - !include { file: sensors/color_proximity_apds9960.yaml, vars: { type: "CLEAR" } }
  # - !include { file: sensors/color_proximity_apds9960.yaml, vars: { type: "RED" } }
  # - !include { file: sensors/color_proximity_apds9960.yaml, vars: { type: "GREEN" } }
  # - !include { file: sensors/color_proximity_apds9960.yaml, vars: { type: "BLUE" } }
  # - !include { file: sensors/color_proximity_apds9960.yaml, vars: { type: "PROXIMITY" } }

  # Various MQTT sensors
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/entrance/temperature", id: "temp_entrance", name: "Temperature Entrance", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/upstairs/temperature", id: "temp_upstairs", name: "Temperature Upstairs", unit: "°C", mdi_icon: "thermometer" } }

  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature", id: "temp_underfloor", name: "Temperature Underfloor", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature_Dwall", id: "temp_underfloorW", name: "Temperature Underfloor Wall", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature_Dboiler", id: "temp_underfloorB", name: "Temperature Underfloor Boiler", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/aquarium_window/temperature", id: "temp_aquariumW", name: "Temperature Aquarium Window", unit: "°C", mdi_icon: "thermometer" } }

  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/entrance/humidity", id: "hum_entrance", name: "Humidity Entrance", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/upstairs/humidity", id: "hum_upstairs", name: "Humidity Upstairs", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/humidity", id: "hum_underfloor", name: "Humidity Underfloor", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/aquarium_window/humidity", id: "hum_aquariumW", name: "Humidity Aquarium Window", unit: "%", mdi_icon: "water-percent" } }

# switch:
#   # Restart button
#   - !include switches/platform_restart.yaml

button:
  # Restart button
  - !include { file: buttons/restart_button.yaml }

  # Display buttons
  - !include { file: buttons/display_button.yaml, vars: { ix: "Refresh", display_id: "weact_display", command: "", mdi_icon: "refresh" } }
  - !include { file: buttons/display_button.yaml, vars: { ix: "Next", display_id: "weact_display", command: "next", mdi_icon: "page-next" } }
  - !include { file: buttons/display_button.yaml, vars: { ix: "Prev", display_id: "weact_display", command: "previous", mdi_icon: "page-previous" } }
  - !include { file: buttons/display_page_button.yaml, vars: { page_ix: "blank", display_id: "weact_display" } }

output:
  # Status LED
  - !include { file: outputs/status_led.yaml, vars: { ix: "", gpio: "GPIO0" } }
  - !include { file: outputs/status_led.yaml, vars: { ix: "2", gpio: "GPIO1" } }

  # RTTTL Buzzer (passive_buzzer)
  - !include { file: outputs/passive_buzzer_ledc.yaml, vars: { ix: "", gpio: "GPIO4" } }
  - !include { file: outputs/passive_buzzer_ledc.yaml, vars: { ix: "2", gpio: "GPIO5" } }

light:
  # Status LED
  - !include { file: lights/status_led.yaml, vars: { ix: "", off_delay: "5s" } }
  - !include { file: lights/status_led.yaml, vars: { ix: "2", off_delay: "5s", room: "${room2}", mqtt_location: "${mqtt_location2}", mqtt_room: "${mqtt_room2}" } }

switch:
  # Status LED cycle
  - !include { file: switches/led_cycle.yaml, vars: { ID: "status_led", cycles: 5, on_delay: "1s", off_delay: "500ms" } }
  - !include { file: switches/led_cycle.yaml, vars: { ID: "status_led2", cycles: 5, on_delay: "1s", off_delay: "500ms", room: "${room2}", mqtt_location: "${mqtt_location2}", mqtt_room: "${mqtt_room2}" } }

  # RTTTL Play (passive_buzzer)
  - !include { file: switches/rtttl_play.yaml, vars: { ix: "" } }
  - !include { file: switches/rtttl_play.yaml, vars: { ix: "2", mqtt_location: "${mqtt_location2}", mqtt_room: "${mqtt_room2}" } }

font:
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_85_font
    size: 85
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_75_font
    size: 75
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_60_font
    size: 60
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_50_font
    size: 50
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_45_font
    size: 45
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_40_font
    size: 40
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_30_font
    size: 30
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_25_font
    size: 25
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_20_font
    size: 20
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_15_font
    size: 15
  - file: 'fonts/Roboto-Medium.ttf'
    id: size_14_font
    size: 14
  - file: 'fonts/Roboto-Light.ttf'
    id: size_12_font
    size: 12
  - file: 'fonts/Roboto-Light.ttf'
    id: size_6_font
    size: 6
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_font
    size: 120
    glyphs: [
      # Weather
      "\U000F0599", # mdi-weather-sunny
      "\U000F0590", # mdi-weather-cloudy
      "\U000F0596", # mdi-weather-pouring
      "\U000F067F", # mdi-weather-snowy-rainy
      "\U000F0F36", # mdi-weather-snowy-heavy
      "\U000F059E", # mdi-weather-windy-variant
      "\U000F0591", # mdi-weather-fog
      "\U000F0F31", # mdi-weather-night-partly-cloudy
      "\U000F0595", # mdi-weather-partly-cloudy
      "\U000F0597", # mdi-weather-rainy
      "\U000F0598", # mdi-weather-snowy
      "\U000F0594", # mdi-weather-clear-night
      "\U000F199F", # unknown
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_temp_icon_font
    size: 25
    glyphs: [
      "\U000F0E03", # mdi-down
      "\U000F0E02", # mdi-up
      "\U000F058C", # raindrop
      "\U000F059D", # wind
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: measures_50_font
    size: 45
    glyphs: [
      "\U000F050F", # thermomether (temperature)
      "\U000F0F54", # home-thermomether (temperature)
      "\U000F0F55", # home-thermomether-outline (temperature)
      "\U000F058E", # water-percent (humidity)
      "\U000F0336", # lightbulb-outline (illuminance)
      "\U000F17FE", # sun-wireless (illuminance)
      "\U000F17FF", # sun-wireless-outline (illuminance)
      "\U000F058F", # water-pump (water)
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: measures_30_font
    size: 28
    glyphs: [
      "\U000F050F", # thermomether (temperature)
      "\U000F0F54", # home-thermomether (temperature)
      "\U000F0F55", # home-thermomether-outline (temperature)
      "\U000F058E", # water-percent (humidity)
      "\U000F0336", # lightbulb-outline (illuminance)
      "\U000F17FE", # sun-wireless (illuminance)
      "\U000F17FF", # sun-wireless-outline (illuminance)
      "\U000F058F", # water-pump (water)
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: units_22_font
    size: 22
    glyphs: [
      "\U000F0504", # temperature-celcius
      "\U000F03F0", # percent (humidity)
      # "\U000", # illuminance
      # "\U000", # water
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: home_icon_font
    size: 24
    glyphs: [
      "\U000F0F48", # mdi-chair-rolling
      "\U000F02E3", # mdi-bed
      "\U000F04B9", # mdi-sofa
      "\U000F065A", # mdi-pot-steam
      "\U000F06D9", # mdi-garage
      "\U000F12BD", # mdi-stairs-up
      "\U000F112B", # mdi-home-roof
      "\U000F081A", # mdi-door
      "\U000F0DD3", # home-floor-negative-1
      "\U000F0DD2", # home-floor-0
      "\U000F0D80", # home-floor-1
      "\U000F02DC", # home
      "\U000F06A1", # home-outline
      "\U000F0710", # shovel (garden)
      "\U000F09F2", # flower-tulip-outline (garden)
      "\U000F058F", # water-pump (water)
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: weather_font_45
    size: 45
    glyphs: [
      # Moon
      "\U000F0F64", # new_moon
      "\U000F0F67", # waxing_crecent
      "\U000F0F61", # first_quarter
      "\U000F0F66", # waxing_gibbous
      "\U000F0F62", # full_moon
      "\U000F0F68", # waning_gibbous
      "\U000F0F63", # last_quarter
      "\U000F0F65", # waning_crescent
      "\U000F199F", # mdi-timer-sand-complete
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: sun_icon_font
    size: 20
    glyphs: [
      "\U000F059C", # sun rise
      "\U000F059B", # sun set
      "\U000F059A", # weather-sunset
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: wlan_icon_font
    size: 25
    glyphs: [
      "\U000F0920", # wifi-strength-1-alert
      "\U000F0922", # wifi-strenght-2
      "\U000F0925", # wifi-strenght-3
      "\U000F0928", # wifi-strenght-4
      "\U000F092E", # wifi-strength-off-outline
      ]
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: cycle_icon_font
    size: 24
    glyphs: [
      "\U000F00E8", # autorenew
      "\U000F19E7", # autorenew-off
      "\U000F04E6", # sync
      "\U000F04E8", # sync-off
      ]

color:
  - id: color_red
    hex: "FF0000"
  - id: color_black
    hex: "FFFFFF"

select:
  # Display Cycle Interval selection
  # id: select_display_cycle_interval
  - !include { file: selects/display_cycle_interval.yaml, vars: { global_variable: "global_display_cycle_page", display_id: "weact_display" } }

<<: !include { file: scripts/interval_display_cycle_pages.yaml, vars: { display_id: weact_display, cycle_script: cycle_pages_in_lux_on_select, lux_sensor: lux2, lux_dark_threshold: 2.9, lux_dark_threshold_elevation_multiplier: 0.1, page_to_skip: page_wifi_qr } }

globals:
  - id: global_display_cycle_page
    type: int
    # restore_value: true
    initial_value: "4"
  - id: global_display_current_cycle
    type: int
    # restore_value: true
    initial_value: "0"
  - id: global_display_enabled
    type: int
    # restore_value: true
    initial_value: "1"

external_components:
#   - source: github://pr#4579
#     components: [waveshare_epaper]
  - source: github://pr#6226
    components: [waveshare_epaper]

spi:
  id: spi_v
  clk_pin: GPIO16 # SCL
  mosi_pin: GPIO19 # SDA

display:
  - platform: waveshare_epaper
    # model: 2.90in #! not working properly
    # model: 2.90in-dke #! not working
    # model: 2.90inv2 #! not working properly
    # model: 2.90inv2-r2 #! not working properly (red whole screen)
    # model: 2.90in-b #! not working
    # model: 2.90in-bv3 #! not working
    # model: 2.90in #! pr#4579, not working
    # model: 2.90inV2 #! pr#4579, not working properly
    model: 2.90in3c # pr#6226, working but slow refresh
    # model: 2.90ina #! pr#6226, not working
    id: weact_display
    cs_pin: GPIO25
    busy_pin: GPIO27
    reset_pin: GPIO14
    reset_duration: 20ms
    dc_pin: GPIO26
    rotation: ${display_rotation}
    # full_update_every: 10
    update_interval: never

    pages:
      - id: page_blank
        lambda: |-
          // Blanl Page
          int x, y;
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}
          //draw clear background
          it.filled_rectangle(0, 0, xRes, yRes, COLOR_OFF);
          //it.print(xRes/2, yRes/2, id(size_14_font), COLOR_ON, TextAlign::CENTER, "Refreshing...");

      - id: page_time
        lambda: |-
          // Date & Time Page
          int x, y, y_m;
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}

          x = 0, y = 0;
          //Time
          it.strftime(x, y, id(size_50_font), "%H:%M", id(sntp_time).now());
          /* it.strftime(225, 68, id(size_60_font), "%S", id(sntp_time).now()); */

          x = 0, y = y + 50 + 5;
          //line
          it.line(x, y, xRes, y);

          x = 0, y = y + 25;
          //Weekday
          it.strftime(xRes / 2, y, id(size_25_font), TextAlign::BASELINE_CENTER ,"%A", id(sntp_time).now());
          // it.strftime(250, 58, id(size_20_font), "%a", id(sntp_time).now());

          x = 0, y = y + 40;
          //date
          it.strftime(x + 53, y, id(size_40_font), TextAlign::BASELINE_RIGHT, "%d", id(sntp_time).now());
          it.printf(x + 53, y, id(size_14_font), TextAlign::BASELINE_LEFT, "D");
          it.strftime(x + 113, y, id(size_40_font), TextAlign::BASELINE_RIGHT, "%m", id(sntp_time).now());
          it.printf(x + 113, y, id(size_14_font), TextAlign::BASELINE_LEFT, "M");

          x = 0, y = y + 5;
          //line
          it.line(x, y, xRes, y);

          x = 0, y = y + 25 + 3;
          //sun set-rise
          it.printf(x + 25, y, id(sun_icon_font), TextAlign::BASELINE_RIGHT, "\U000F059C");
          it.printf(x + 125, y, id(size_25_font), TextAlign::BASELINE_RIGHT, "%s", id(sunrise).state.c_str());
          it.printf(x + 25, y + 25, id(sun_icon_font), TextAlign::BASELINE_RIGHT, "\U000F059A");
          it.printf(x + 125, y + 25, id(size_25_font), TextAlign::BASELINE_RIGHT, "%s", id(sunset).state.c_str());

          x = 0, y = y + 25 + 5;
          //line
          it.line(x, y, xRes, y);

          //* TEMPERATURES
          x = 0, y = y + 30 + 3, y_m = y + 20;
          // Outside
          it.printf(x+15, y_m, id(measures_50_font), id(color_red), TextAlign::BASELINE_CENTER , "\U000F050F");
          if (id(temp).has_state()) {
            it.printf(x+100, y, id(size_30_font), id(color_black), TextAlign::BASELINE_RIGHT , "%.1f", id(temp).state);
            it.printf(x+100, y, id(units_22_font), id(color_black), TextAlign::BASELINE_LEFT , "\U000F0504");
          }

          x = 0, y = y + 30;
          // Inside
          // it.printf(x+10, y, id(measures_30_font), TextAlign::BASELINE_CENTER , "\U000F050F");
          if (id(temp2).has_state()) {
            it.printf(x+100, y, id(size_30_font), id(color_black), TextAlign::BASELINE_RIGHT , "%.1f", id(temp2).state);
            it.printf(x+100, y, id(units_22_font), id(color_black), TextAlign::BASELINE_LEFT , "\U000F0504");
          }



          // ALIGN Y TO BOTTOM
          x = 0, y = yRes - 25 - 5 - 3;
          //line
          it.line(x, y, xRes, y);

          //wifi
          if (id(wifi_rssi).has_state()) {
            x = xRes - 5, y = yRes - 5;
            // x = 265, y = 120;
            if (id(wifi_rssi).state >= -50) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0928");
            } else if (id(wifi_rssi).state >= -60) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0925");
            } else if (id(wifi_rssi).state >= -70) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0922");
            } else if (id(wifi_rssi).state >= -80) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0920");
            } else {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F092E");
            }
          }

          //* Display Cycle
          x = 0; y = yRes - 5;
          if (id(select_display_cycle_interval).state != "Never") {
            it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E6");
            x = x + 24;
            it.printf(x, y, id(size_25_font), TextAlign::BASELINE_LEFT, "%s", id(select_display_cycle_interval).state.c_str());
          } else {
            it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E8");
          }

      - id: page_measures
        lambda: |-
          // Date & Time Page
          int x, y, y_m;
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}

          x = 0, y = 0;
          //Time
          it.strftime(x, y, id(size_50_font), "%H:%M", id(sntp_time).now());
          /* it.strftime(225, 68, id(size_60_font), "%S", id(sntp_time).now()); */

          x = 0, y = y + 50 + 5;
          //line
          it.line(x, y, xRes, y);

          //* TEMPERATURES
          x = 0, y = y + 30 + 3, y_m = y + 20;
          // Outside
          it.printf(x+15, y_m, id(measures_50_font), id(color_red), TextAlign::BASELINE_CENTER , "\U000F050F");
          if (id(temp).has_state()) {
            it.printf(x+100, y, id(size_30_font), id(color_black), TextAlign::BASELINE_RIGHT , "%.1f", id(temp).state);
            it.printf(x+100, y, id(units_22_font), id(color_black), TextAlign::BASELINE_LEFT , "\U000F0504");
          }

          x = 0, y = y + 30;
          // Inside
          // it.printf(x+10, y, id(measures_30_font), TextAlign::BASELINE_CENTER , "\U000F050F");
          if (id(temp2).has_state()) {
            it.printf(x+100, y, id(size_30_font), id(color_black), TextAlign::BASELINE_RIGHT , "%.1f", id(temp2).state);
            it.printf(x+100, y, id(units_22_font), id(color_black), TextAlign::BASELINE_LEFT , "\U000F0504");
          }

          x = 0, y = y + 5;
          //line
          it.line(x, y, xRes, y);

          //* HUMIDITY
          x = 0, y = y + 30 + 3, y_m = y + 20;
          // Outside
          it.printf(x+15, y_m, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F058E");
          if (id(hum).has_state()) {
            it.printf(x+100, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(hum).state);
            it.printf(x+100, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
          }

          x = 0, y = y + 30;
          // Inside
          // it.printf(x+10, y, id(measures_30_font), TextAlign::BASELINE_CENTER , "\U000F058E");
          if (id(hum2).has_state()) {
            it.printf(x+100, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(hum2).state);
            it.printf(x+100, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
          }

          x = 0, y = y + 5;
          //line
          it.line(x, y, xRes, y);

          //* ILLUMINANCE and UV
          x = 0, y = y + 30 + 3, y_m = y + 20;
          // Illuminance
          it.printf(x+15, y_m, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F17FF");
          if (id(lux).has_state() and not isnan(id(lux).state)) {
            if(int(id(lux).state) < 99) {
              it.printf(x+100, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(lux).state);
            } else {
              if(int(id(lux).state) > 9999) {
                it.printf(x+100, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.0fK", id(lux).state / 1000);
              } else {
                it.printf(x+100, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.0f", id(lux).state);
              }
            }
            it.printf(x+104, y, id(size_20_font), TextAlign::BASELINE_LEFT , "LX");
          }

          x = 0, y = y + 30;
          // UV
          // it.printf(x+15, y, id(measures_30_font), TextAlign::BASELINE_CENTER , "\U000F058E");
          if (id(uv_index).has_state()) {
            it.printf(x+90, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.0f", id(uv_index).state);
            it.printf(x+94, y, id(size_20_font), TextAlign::BASELINE_LEFT , "UVI");
          }

          // ALIGN Y TO BOTTOM
          x = 0, y = yRes - 25 - 5 - 3;
          //line
          it.line(x, y, xRes, y);

          //wifi
          if (id(wifi_rssi).has_state()) {
            x = xRes - 5, y = yRes - 5;
            // x = 265, y = 120;
            if (id(wifi_rssi).state >= -50) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0928");
            } else if (id(wifi_rssi).state >= -60) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0925");
            } else if (id(wifi_rssi).state >= -70) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0922");
            } else if (id(wifi_rssi).state >= -80) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0920");
            } else {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F092E");
            }
          }

          //* Display Cycle
          x = 0; y = yRes - 5;
          if (id(select_display_cycle_interval).state != "Never") {
            it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E6");
            x = x + 24;
            it.printf(x, y, id(size_25_font), TextAlign::BASELINE_LEFT, "%s", id(select_display_cycle_interval).state.c_str());
          } else {
            it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E8");
          }
      # - id: page_home_temps
      #   lambda: |-
      #     // Main Home Temperatures and Humidity Page
      #     #define xRes ${display_xRes}
      #     #define yRes ${display_yRes}
      #     int x, y;

      #     //* Temperature
      #     x = 24; y = 64;
      #     it.printf(x, y-12, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F0F55");

      #     // Entrance
      #     x = 70; y = 30;
      #     it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F081A");
      #     if (id(temp_entrance).has_state()) {
      #       it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(temp_entrance).state);
      #       // it.printf(x+74, y, id(size_20_font), TextAlign::BASELINE_LEFT , "°");
      #       // it.printf(x+80, y, id(size_20_font), TextAlign::BASELINE_LEFT , "C");
      #       it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
      #     }

      #     // Upstairs
      #     x = 200; y = 30;
      #     it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F12BD");
      #     if (id(temp_upstairs).has_state()) {
      #       it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(temp_upstairs).state);
      #       it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
      #     }

      #     // Underfloor
      #     x = 70; y = 60;
      #     it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F0DD3");
      #     if (id(temp_underfloor).has_state()) {
      #       it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(temp_underfloor).state);
      #       it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
      #     }

      #     // Aquarium Window
      #     x = 200; y = 60;
      #     it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F112B");
      #     if (id(temp_aquariumW).has_state()) {
      #       it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(temp_aquariumW).state);
      #       it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
      #     }

      #     //line
      #     it.line(0, 64, 296, 64);

      #     //* Humidity
      #     x = 24; y = 128;
      #     it.printf(x, y-12, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F058E");

      #     // Entrance
      #     x = 70; y = 94;
      #     it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F081A");
      #     if (id(hum_entrance).has_state()) {
      #       it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(hum_entrance).state);
      #       // it.printf(x+74, y, id(size_20_font), TextAlign::BASELINE_LEFT , "°");
      #       // it.printf(x+80, y, id(size_20_font), TextAlign::BASELINE_LEFT , "C");
      #       it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
      #     }

      #     // Upstairs
      #     x = 200; y = 94;
      #     it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F12BD");
      #     if (id(hum_upstairs).has_state()) {
      #       it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(hum_upstairs).state);
      #       it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
      #     }

      #     // Underfloor
      #     x = 70; y = 124;
      #     it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F0DD3");
      #     if (id(hum_underfloor).has_state()) {
      #       it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(hum_underfloor).state);
      #       it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
      #     }

      #     // Aquarium Window
      #     x = 200; y = 124;
      #     it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F112B");
      #     if (id(hum_aquariumW).has_state()) {
      #       it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(hum_aquariumW).state);
      #       it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
      #     }


      # - id: page_pump_temps
      #   lambda: |-
      #     // Pump Temperatures and Humidity Page
      #     #define xRes ${display_xRes}
      #     #define yRes ${display_yRes}
      #     int x, y;

      #     //* Pump Temperatures
      #     x = 148; y = 18;
      #     it.printf(x, y, id(size_15_font), TextAlign::BASELINE_CENTER , "PUMP Temperatures");

      #     //* Temperature
      #     x = 20; y = 64;
      #     it.printf(x, y-12, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F050F");

      #     // Pump
      #     x = 70; y = 60;
      #     // it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F06D9");
      #     if (id(temp).has_state()) {
      #       it.printf(x+70, y, id(size_50_font), TextAlign::BASELINE_RIGHT , "%.1f", id(temp).state);
      #       it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
      #     }

      #     // Pump Floor
      #     x = 200; y = 60;
      #     // it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F058F");
      #     if (id(tempFloor).has_state()) {
      #       it.printf(x+70, y, id(size_50_font), TextAlign::BASELINE_RIGHT , "%.1f", id(tempFloor).state);
      #       it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
      #     }

      #     //line
      #     it.line(0, 63, 296, 63);

      #     //* Pump Humidity and Illuminance
      #     x = 148; y = 64+18;
      #     it.printf(x, y, id(size_15_font), TextAlign::BASELINE_CENTER , "PUMP Humidity and Illuminance");

      #     //* Humidity
      #     x = 20; y = 128;
      #     it.printf(x, y-12, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F058E");

      #     x = 70; y = 124;
      #     // it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F058F");
      #     if (id(hum).has_state() and not isnan(id(hum).state)) {
      #       it.printf(x+70, y, id(size_50_font), TextAlign::BASELINE_RIGHT , "%.1f", id(hum).state);
      #       // it.printf(x+74, y, id(size_20_font), TextAlign::BASELINE_LEFT , "°");
      #       // it.printf(x+80, y, id(size_20_font), TextAlign::BASELINE_LEFT , "C");
      #       it.printf(x+70, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
      #     }

      #     //* Illuminance
      #     // x = 148+24; y = 128;
      #     // it.printf(x, y-12, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F17FE");

      #     x = 200; y = 124;
      #     // it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F058F");
      #     if (id(lux).has_state() and not isnan(id(lux).state)) {
      #       if(int(id(lux).state) < 99) {
      #         it.printf(x+70, y, id(size_50_font), TextAlign::BASELINE_RIGHT , "%.1f", id(lux).state);
      #       } else {
      #         if(int(id(lux).state) > 9999) {
      #           it.printf(x+70, y, id(size_50_font), TextAlign::BASELINE_RIGHT , "%.0fK", id(lux).state / 1000);
      #         } else {
      #           it.printf(x+70, y, id(size_50_font), TextAlign::BASELINE_RIGHT , "%.0f", id(lux).state);
      #         }
      #       }
      #       // it.printf(x+70, y, id(size_50_font), TextAlign::BASELINE_RIGHT , "%.1f", id(lux_garage).state);
      #       it.printf(x+74, y, id(size_20_font), TextAlign::BASELINE_LEFT , "LX");
      #       // it.printf(x+80, y, id(size_20_font), TextAlign::BASELINE_LEFT , "C");
      #     }

      #     //* Display Cycle
      #     x = 0; y = 126;
      #     if (id(select_display_cycle_interval).state != "Never") {
      #       it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E6");
      #       x = 16; y = 126;
      #       it.printf(x, y, id(size_12_font), TextAlign::BASELINE_LEFT, "%s", id(select_display_cycle_interval).state.c_str());
      #     } else {
      #       it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E8");
      #     }

      # - id: page_water
      #   lambda: |-
      #     // Water
      #     #define xRes ${display_xRes}
      #     #define yRes ${display_yRes}
      #     int x, y;

      #     //* Pump Water
      #     x = 148; y = 18;
      #     it.printf(x, y, id(size_15_font), TextAlign::BASELINE_CENTER , "WATER Used");

      #     //* Water
      #     x = 20; y = 64;
      #     it.printf(x, y-12, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F058F");

      #     // All Used
      #     x = 170; y = 60;
      #     // it.printf(x, y, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F06D9");
      #     if (id(water_used_all).has_state()) {
      #       it.printf(x+70, y, id(size_40_font), TextAlign::BASELINE_RIGHT , "%.3f", id(water_used_all).state);
      #       it.printf(x+74, y-4, id(size_20_font), TextAlign::BASELINE_LEFT , "M");
      #       it.printf(x+94, y-12, id(size_12_font), TextAlign::BASELINE_LEFT , "3");
      #     }

      #     //line
      #     it.line(70, 64, 296, 64);

      #     // Home Used
      #     x = 284; y = 94;
      #     it.printf(x, y-2, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F06A1");

      #     x = 170; y = 94;
      #     if (id(water_used_home).has_state()) {
      #       it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.3f", id(water_used_home).state);
      #       it.printf(x+74, y-4, id(size_20_font), TextAlign::BASELINE_LEFT , "M");
      #       it.printf(x+94, y-12, id(size_12_font), TextAlign::BASELINE_LEFT , "3");
      #     }

      #     // Garden Used
      #     x = 284; y = 128;
      #     it.printf(x, y-2, id(home_icon_font), TextAlign::BASELINE_CENTER , "\U000F09F2");

      #     x = 170; y = 128;
      #     if (id(water_used_garden).has_state()) {
      #       it.printf(x+70, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.3f", id(water_used_garden).state);
      #       it.printf(x+74, y-4, id(size_20_font), TextAlign::BASELINE_LEFT , "M");
      #       it.printf(x+94, y-12, id(size_12_font), TextAlign::BASELINE_LEFT , "3");
      #     }

      #     //* Display Cycle
      #     x = 0; y = 126;
      #     if (id(select_display_cycle_interval).state != "Never") {
      #       it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E6");
      #       x = 16; y = 126;
      #       it.printf(x, y, id(size_12_font), TextAlign::BASELINE_LEFT, "%s", id(select_display_cycle_interval).state.c_str());
      #     } else {
      #       it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E8");
      #     }

      - id: page_wifi_qr
        lambda: |-
          // QR Code for Guest WiFi
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}
          #define xCenter (xRes/2 + 40) // X position center
          int x, y;

          //id(t5_display).clear();
          it.print(10, 20, id(size_14_font), TextAlign::BASELINE_LEFT, "Join Guest WIFI");
          // it.print(xRes - 40, yRes - 40, id(font_small), TextAlign::BASELINE_LEFT, "5");
          // guest wifi
          // WIFI:S:<WIFI NAME HERE>;T:WPA;P:<WIFI PASSWOD HERE>;H:false;;
          // Draw the QR-code at position [x=120,y=5] with white color and a 4x scale
          it.qr_code(5, 35, id(guestwifi_qr), COLOR_ON, 4);

          // ALIGN Y TO BOTTOM
          x = 0, y = yRes - 25 - 5 - 3;
          //line
          it.line(x, y, xRes, y);

          //wifi
          if (id(wifi_rssi).has_state()) {
            x = xRes - 5, y = yRes - 5;
            // x = 265, y = 120;
            if (id(wifi_rssi).state >= -50) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0928");
            } else if (id(wifi_rssi).state >= -60) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0925");
            } else if (id(wifi_rssi).state >= -70) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0922");
            } else if (id(wifi_rssi).state >= -80) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0920");
            } else {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F092E");
            }
          }


          //* Display Cycle
          x = 0; y = yRes - 5;
          if (id(select_display_cycle_interval).state != "Never") {
            it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E6");
            x = x + 24;
            it.printf(x, y, id(size_25_font), TextAlign::BASELINE_LEFT, "%s", id(select_display_cycle_interval).state.c_str());
          } else {
            it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E8");
          }
