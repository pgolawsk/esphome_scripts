# ESP12F sensor board with temperature and humidity sensor SHTx30 and lux sensor BH1750
# Pawelo 20221117, 1.0.0, created based on edp12f_temp_hum.yml
# Pawelo 20221119, 1.0.1. added updates as parameter

#! run with this command to ovveride sunstitutions
# esphome -s devicename espXX -s updates 1m -s room <Room name> -s mqtt_room <room> run esp12f_temp_hum_lux.yml --device 192.168.x.x
# heare are default values if those are not given via command line

substitutions:
  devicename: espXX
  # friendly name of room to display in HA/Web
  room: Room
  # this is topic and sub-topic for MQTT - it publishes under <topic>/<sub-topic>/<sensor>
  mqtt_location: home
  mqtt_room: room
  updates: "30s"

esphome:
  name: $devicename
  comment: $room ESP12F controller
  platform: ESP8266
  board: esp12e
  project:
    name: "pawelo.temp_hum_lux"
    version: "1.0.1"

# Enable logging
logger:
#  level: NONE, ERROR, WARN, INFO, DEBUG (default), VERBOSE, VERY_VERBOSE
  level: INFO
  logs:
    mqtt.component: INFO
    mqtt.client: ERROR

ota:
  safe_mode: true
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  domain: ""
  fast_connect: true
  reboot_timeout: 45min

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "$devicename $room Fallback Hotspot"
    password: !secret wifi_fallback_password


# Setup for HomeAssistant
#api:
#  password: !secret api_password

captive_portal:

mqtt:
  broker: !secret mqtt_ip
  port: !secret mqtt_port
#  username: $devicename
  username: !secret mqtt_user
  password: !secret mqtt_password
  client_id: $devicename
 # id: $devicename

i2c:
  sda: 4
  scl: 5
  scan: true
  id: bus_a

text_sensor:
  - platform: template
    name: $room Uptime
    id: uptime_human
    icon: mdi:clock-start
    internal: true
    state_topic: $devicename/uptime_text
    on_value:
      - mqtt.publish:
          topic: "$mqtt_location/$mqtt_room/uptime_text"
          payload: !lambda |-
            return to_string(id(uptime_human).state);

sensor:
  - platform: wifi_signal
    name: "$room WiFi Signal"
    id: wifi_rssi
    icon: mdi:signal
    update_interval: $updates
#    internal: true
    state_topic: $devicename/rssi
    on_value:
      - mqtt.publish:
          topic: "$mqtt_location/$mqtt_room/rssi"
          payload: !lambda |-
            return to_string(id(wifi_rssi).state);
  - platform: sht3xd
    temperature:
      name: "$room Temperature"
      id: temp
      state_topic: $devicename/temperature
      on_value:
        - mqtt.publish:
            topic: "$mqtt_location/$mqtt_room/temperature"
            payload: !lambda |-
              return to_string(id(temp).state);
    humidity:
      name: "$room Humidity"
      id: hum
      state_topic: $devicename/humidity
      on_value:
        - mqtt.publish:
            topic: "$mqtt_location/$mqtt_room/humidity"
            payload: !lambda |-
              return to_string(id(hum).state);
    address: 0x44
    update_interval: $updates
  - platform: bh1750
    name: "$room Illuminance"
    id: lux
    icon: mdi:mdi-decagram-outline
    state_topic: $devicename/illuminance
    on_value:
      - mqtt.publish:
          topic: "$mqtt_location/$mqtt_room/illuminance"
          payload: !lambda |-
            return to_string(id(hum).state);
    address: 0x23
    update_interval: $updates
  - platform: uptime
    name: "$room Uptime Sensor"
    id: uptime_sensor
    icon: mdi:clock-start
    internal: true
    state_topic: $devicename/uptime
    on_value:
      - mqtt.publish:
          topic: "$mqtt_location/$mqtt_room/uptime"
          payload: !lambda |-
            return to_string(id(uptime_sensor).state);
    update_interval: $updates
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();
    filters:
      - lambda: return x / 60;
    unit_of_measurement: "m"

web_server:
  port: 80
  include_internal: true
  ota: false # disable OTA via web

# Activates prometheus /metrics endpoint
prometheus:
  include_internal: false