---
#* ESP32 sensor board script name reflecting configuration esp32_MMmm_SSss__PP.yaml
#* Please read README.md for details
#? ESP32-WROOM-32 minimum wiring https://www.mischianti.org/2021/05/30/esp32-wroom-32-esp32-s-flash-pinout-specs-and-ide-configuration-1/
###
# Pawelo 20240525, 1.1.5, created based on esp32_dev.yaml
# Pawelo 20240619, 1.1.5, added i2c bus_b and put SHT41 and BH1750 sensors
# Pawelo 20240619, 1.1.5, added room2, mqtt_location2, mqtt_room2 as secondary variables
# Pawelo 20240619, 1.1.5, added 2nd led as ix: "U"
# Pawelo 20240625, 1.1.5, added 2nd i2c support, secondary room/mqtt
# Pawelo 20240625, 1.1.5, added weeact 2.9 display
# Pawelo, 20240902, refactoring: "status_led" renamed to "led"
# Pawelo, 20241116, switched to wifi_extended
# Pawelo, 20241122, include first OVERRIDEs and then BOARD itself, removed old/unused mqtt commented code
# Pawelo, 20241123, added 1 page with bigger font and just time, data and temperatures, removed 2 pages with medium font

#! run with this command to override substitutions
# esphome -s devicename espXX -s updates 1min -s room <Room name> -s mqtt_room <room> run esp32_MMmm_SSss__PP.yaml --device 192.168.x.x
# heare are default values if those are not given via command line
substitutions:
  devices: "Temperature, Humidity, Pressure, Gas Resistance via BME680/SHT41 and UV, Illuminance via LTR390/BH1750"
  project_name: "pgolawsk.esp_home"
  version: "20241123"

  devicename: esp32-xx
  updates: "30s"
  room: Room # friendly name of room to display in HA/Web
  # this is ADDITIONAL topic and sub-topic for MQTT - it publishes under <topic>/<sub-topic>/<sensor>
  # by default it's also published under <devicename>/<id_sensor>
  mqtt_location: home
  mqtt_room: room
    # (optional) secondary room/mqtt
  room2: none
  mqtt_location2: none
  mqtt_room2: none

  # default variable values for !include statements
  accuracy_decimals: "2"

  # Display setup variables
  display_xRes: "128"
  display_yRes: "296"
  display_rotation: "0"
  display_updates_interval: 5s # need to be small for display manageable interval cycle
  display_updates_manual_cycle_delay: 5min

# Override some settings included below in _board_ setup
<<: !include includes/time_sntp_with_sun.yaml #WARN: this is to make sunrise and sunset sensor to be updated on every time sync event
# <<: !include includes/mqtt_with_rtttl.yaml #WARN: override mqtt with RTTTL support if needed (buzzer and status led)
# <<: !include { file: includes/logger_level.yaml, vars: { level: DEBUG, baud_rate: 115200 } } #WARN: override default log level to specific one
<<: !include { file: includes/wifi_extended.yaml, vars: { } } #WARN: override wifi to connect to extended network instead of default
# <<: !include { file: includes/wifi_extended2.yaml, vars: { } } #WARN: override wifi to connect to extended network instead of default
# <<: !include includes/wifi_outside.yaml #WARN: override wifi to connect to outside network instead of default

# Include basics of a board
<<: !include includes/board_esp32.yaml

# Include interfaces needed
# <<: !include { file: interfaces/i2c.yaml, vars: { bus_id: "bus_a", sda: "GPIO21", scl: "GPIO22" } }
# note: when more i2c interfaces are needed then need to include those separately
i2c:
  - !include { file: interfaces/i2c__include.yaml, vars: { bus_id: "bus_a", sda: "GPIO21", scl: "GPIO22" } }
  - !include { file: interfaces/i2c__include.yaml, vars: { bus_id: "bus_b", sda: "GPIO17", scl: "GPIO18" } }
# <<: !include { file: interfaces/dallas.yaml, vars: { gpio: "GPIO10" } }
<<: !include { file: interfaces/rtttl.yaml, vars: { ix: "U" } }
<<: !include includes/qr_guestwifi.yaml

text_sensor:
  - !include sensors/text_uptime.yaml
  - !include sensors/text_version.yaml
  - !include sensors/text_wifi_info.yaml

  # Sun component
  - !include sensors/text_sun_sunrise.yaml
  - !include sensors/text_sun_sunset.yaml
  - !include sensors/text_sun_time_of_day.yaml
  - !include sensors/text_sun_direction.yaml

  # Air Quality sensor
  # - !include { file: sensors/text_air_quality.yaml }

binary_sensor:
  # HA Connected
  - !include sensors/binary_ha_connected.yaml

sensor:
  - !include sensors/temp_internal.yaml
  - !include sensors/uptime.yaml
  - !include sensors/wifi_signal.yaml

  # Sun component
  - !include sensors/sun_elevation.yaml
  - !include sensors/sun_azimuth.yaml

  # Temperature and Humidity sensor
  # - !include { file: sensors/temp_hum_SHT3x.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x44" } }
  # - !include { file: sensors/temp_hum_SHT4x.yaml, vars: { ix: "U", bus_id: "bus_a", address: "0x44" } }
  - !include { file: sensors/temp_hum_SHT4x.yaml, vars: { ix: "U", bus_id: "bus_b", address: "0x44", room: "${room2}", mqtt_location: "${mqtt_location2}", mqtt_room: "${mqtt_room2}" } }
  # - !include { file: sensors/temp_hum_AHT2x.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x38", temp_offset: 0.0, hum_offset: 0.0 } }

  # # Temperature, Humidity, Pressure and Gas Resistance seensor
  - !include { file: sensors/temp_hum_press_gas_BME680.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x77", temp_offset: 0.0, hum_offset: 0.0, pressure_offset: 0.0 } }

  # Illuminance sensor
  # - !include { file: sensors/lux_BH1750.yaml, vars: { ix: "U", bus_id: "bus_a", address: "0x23" } }
  - !include { file: sensors/lux_BH1750.yaml, vars: { ix: "U", bus_id: "bus_b", address: "0x23", room: "${room2}", mqtt_location: "${mqtt_location2}", mqtt_room: "${mqtt_room2}"  } }
  - !include { file: sensors/lux_uv_ltr390.yaml, vars: { ix: "", bus_id: "bus_a", address: "0x53" } }

  # Various MQTT sensors
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/entrance/temperature", id: "temp_entrance", name: "Temperature Entrance", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/upstairs/temperature", id: "temp_upstairs", name: "Temperature Upstairs", unit: "°C", mdi_icon: "thermometer" } }

  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature", id: "temp_underfloor", name: "Temperature Underfloor", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature_Dwall", id: "temp_underfloorW", name: "Temperature Underfloor Wall", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/temperature_Dboiler", id: "temp_underfloorB", name: "Temperature Underfloor Boiler", unit: "°C", mdi_icon: "thermometer" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/aquarium_window/temperature", id: "temp_aquariumW", name: "Temperature Aquarium Window", unit: "°C", mdi_icon: "thermometer" } }

  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/entrance/humidity", id: "hum_entrance", name: "Humidity Entrance", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "home/upstairs/humidity", id: "hum_upstairs", name: "Humidity Upstairs", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/underfloor/humidity", id: "hum_underfloor", name: "Humidity Underfloor", unit: "%", mdi_icon: "water-percent" } }
  - !include { file: sensors/value_mqtt_subscribe.yaml, vars: { topic: "measures/aquarium_window/humidity", id: "hum_aquariumW", name: "Humidity Aquarium Window", unit: "%", mdi_icon: "water-percent" } }

output:
  # LEDs
  - !include { file: outputs/led.yaml, vars: { ix: "U_red", gpio: "GPIO0", inverted: false } }
  - !include { file: outputs/led.yaml, vars: { ix: "U_green", gpio: "GPIO15", inverted: false } }
  - !include { file: outputs/led.yaml, vars: { ix: "_red", gpio: "GPIO4", inverted: false } }
  - !include { file: outputs/led.yaml, vars: { ix: "_blue", gpio: "GPIO5", inverted: false } }

  # Measurement LED
  # - !include { file: outputs/measurement_led.yaml, vars: { ix: "", gpio: "GPIO12" } }

  # Passive/RTTTL Buzzer
  - !include { file: outputs/passive_buzzer_ledc.yaml, vars: { ix: "U", gpio: "GPIO12" } }
  - !include { file: outputs/passive_buzzer_ledc.yaml, vars: { ix: "", gpio: "GPIO13" } }

light:
  # LEDs
  - !include { file: lights/led.yaml, vars: { ix: "U_red", platform: "binary", off_delay: "5s", room: "${room2}", mqtt_location: "${mqtt_location2}", mqtt_room: "${mqtt_room2}" } }
  - !include { file: lights/led.yaml, vars: { ix: "U_green", platform: "binary", off_delay: "5s", room: "${room2}", mqtt_location: "${mqtt_location2}", mqtt_room: "${mqtt_room2}" } }
  - !include { file: lights/led.yaml, vars: { ix: "_red", platform: "binary", off_delay: "5s" } }
  - !include { file: lights/led.yaml, vars: { ix: "_blue", platform: "binary", off_delay: "5s" } }

  # Measurement LED
  # - !include { file: lights/measurement_led.yaml, vars: { ix: "", off_delay: "5s" } }

switch:
  # Restart button
  # - !include { file: switches/platform_restart.yaml }

  # LEDs cycle
  - !include { file: switches/led_cycle.yaml, vars: { ID: "ledU_red", cycles: 5, on_delay: "1s" , off_delay: "500ms", room: "${room2}", mqtt_location: "${mqtt_location2}", mqtt_room: "${mqtt_room2}" } }
  - !include { file: switches/led_cycle.yaml, vars: { ID: "ledU_green", cycles: 5, on_delay: "1s" , off_delay: "500ms", room: "${room2}", mqtt_location: "${mqtt_location2}", mqtt_room: "${mqtt_room2}" } }
  - !include { file: switches/led_cycle.yaml, vars: { ID: "led_red", cycles: 3, on_delay: "1s" , off_delay: "500ms" } }
  - !include { file: switches/led_cycle.yaml, vars: { ID: "led_blue", cycles: 3, on_delay: "1s" , off_delay: "500ms" } }

  # RTTTL Play (passive_buzzer)
  - !include { file: switches/rtttl_play.yaml, vars: { ix: "U", room: "${room2}", mqtt_location: "${mqtt_location2}", mqtt_room: "${mqtt_room2}" } }
  - !include { file: switches/passive_buzzer.yaml, vars: { ix: "U", off_delay: "500ms", room: "${room2}", mqtt_location: "${mqtt_location2}", mqtt_room: "${mqtt_room2}" } }
#  - !include { file: switches/rtttl_play.yaml, vars: { ix: "" } }
  - !include { file: switches/passive_buzzer.yaml, vars: { ix: "", off_delay: "500ms" } }
  - !include { file: switches/passive_buzzer_cycle.yaml, vars: { ix: "", cycles: 3, freq: "1000Hz", on_delay: "500ms", off_delay: "200ms" } }

button:
  # Restart, reset and shutdown buttons
  - !include { file: buttons/restart_button.yaml }
  - !include { file: buttons/safe_mode_restart_button.yaml }
  - !include { file: buttons/factory_reset_button.yaml }
  - !include { file: buttons/shutdown_button.yaml }

  # Display buttons
  - !include { file: buttons/display_button.yaml, vars: { ix: "Refresh", display_id: "weact_display", command: "", mdi_icon: "refresh" } }
  - !include { file: buttons/display_button.yaml, vars: { ix: "Next", display_id: "weact_display", command: "next", mdi_icon: "page-next" } }
  - !include { file: buttons/display_button.yaml, vars: { ix: "Prev", display_id: "weact_display", command: "previous", mdi_icon: "page-previous" } }
  - !include { file: buttons/display_page_button.yaml, vars: { page_ix: "blank", display_id: "weact_display" } }

# Include fonts for display
<<: !include fonts/fonts_weeact_display.yaml

select:
  # Display Cycle Interval selection
  # id: select_display_cycle_interval
  - !include { file: selects/display_cycle_interval.yaml, vars: { global_variable: "global_display_cycle_page", display_id: "weact_display" } }

<<: !include { file: scripts/interval_display_cycle_pages.yaml, vars: { display_id: weact_display, cycle_script: cycle_pages_in_lux_on_select, lux_sensor: luxU, lux_dark_threshold: 3.9, lux_dark_threshold_elevation_multiplier: 0.1, page_to_skip: page_wifi_qr } }

globals:
  - id: global_display_cycle_page
    type: int
    # restore_value: true
    initial_value: "4"
  - id: global_display_current_cycle
    type: int
    # restore_value: true
    initial_value: "0"
  - id: global_display_enabled
    type: int
    # restore_value: true
    initial_value: "1"

external_components:
#   - source: github://pr#4579
#     components: [waveshare_epaper]
  - source: github://pr#6226
    components: [waveshare_epaper]

spi:
  id: spi_v
  clk_pin: GPIO16 # SCL
  mosi_pin: GPIO19 # SDA

display:
  - platform: waveshare_epaper
    # model: 2.90in #! not working properly
    # model: 2.90in-dke #! not working
    # model: 2.90inv2 #! not working properly
    # model: 2.90inv2-r2 #! not working properly (red whole screen)
    # model: 2.90in-b #! not working
    # model: 2.90in-bv3 #! not working
    # model: 2.90in #! pr#4579, not working
    # model: 2.90inV2 #! pr#4579, not working properly
    model: 2.90in3c # pr#6226, working but slow refresh
    # model: 2.90ina #! pr#6226, not working
    id: weact_display
    cs_pin: GPIO25
    busy_pin: GPIO27
    reset_pin: GPIO14
    reset_duration: 20ms
    dc_pin: GPIO26
    rotation: ${display_rotation}
    # full_update_every: 10
    update_interval: never

    pages:
      - id: page_blank
        lambda: |-
          // Blanl Page
          int x, y;
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}
          //draw clear background
          it.filled_rectangle(0, 0, xRes, yRes, COLOR_OFF);
          //it.print(xRes/2, yRes/2, id(size_14_font), COLOR_ON, TextAlign::CENTER, "Refreshing...");

      # - id: page_time
      #   lambda: |-
      #     // Date & Time Page
      #     int x, y, y_m;
      #     esphome::Color fi;
      #     fi = id(color_black);
      #     #define xRes ${display_xRes}
      #     #define yRes ${display_yRes}

      #     x = 0, y = 0;
      #     //Time
      #     it.strftime(x, y, id(size_50_font), "%H:%M", id(sntp_time).now());
      #     /* it.strftime(225, 68, id(size_60_font), "%S", id(sntp_time).now()); */

      #     x = 0, y = y + 50 + 5;
      #     //line
      #     it.line(x, y, xRes, y);

      #     x = 0, y = y + 25;
      #     //Weekday
      #     if (id(sntp_time).now().day_of_week == 1) {
      #       fi = id(color_red); // Sunday show in red font
      #     } else {
      #       fi = id(color_black);
      #     }
      #     it.strftime(xRes / 2, y, id(size_25_font), fi, TextAlign::BASELINE_CENTER ,"%A", id(sntp_time).now());
      #     // it.strftime(250, 58, id(size_20_font), "%a", id(sntp_time).now());

      #     x = 0, y = y + 40;
      #     //date
      #     it.strftime(x + 53, y, id(size_40_font), TextAlign::BASELINE_RIGHT, "%d", id(sntp_time).now());
      #     it.printf(x + 53, y, id(size_14_font), TextAlign::BASELINE_LEFT, "D");
      #     it.strftime(x + 113, y, id(size_40_font), TextAlign::BASELINE_RIGHT, "%m", id(sntp_time).now());
      #     it.printf(x + 113, y, id(size_14_font), TextAlign::BASELINE_LEFT, "M");

      #     x = 0, y = y + 5;
      #     //line
      #     it.line(x, y, xRes, y);

      #     x = 0, y = y + 25 + 3;
      #     //sun set-rise
      #     it.printf(x + 25, y, id(sun_icon_font), TextAlign::BASELINE_RIGHT, "\U000F059C");
      #     it.printf(x + 125, y, id(size_25_font), TextAlign::BASELINE_RIGHT, "%s", id(sunrise).state.c_str());
      #     it.printf(x + 25, y + 25, id(sun_icon_font), TextAlign::BASELINE_RIGHT, "\U000F059A");
      #     it.printf(x + 125, y + 25, id(size_25_font), TextAlign::BASELINE_RIGHT, "%s", id(sunset).state.c_str());

      #     x = 0, y = y + 25 + 5;
      #     //line
      #     it.line(x, y, xRes, y);

      #     //* TEMPERATURES
      #     x = 0, y = y + 30 + 3, y_m = y + 20;
      #     // fi = id(color_black);
      #     // Outside
      #     it.printf(x+12, y_m, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F050F");
      #     if (id(temp).has_state() and not isnan(id(temp).state)) {
      #       if (id(temp).state <= 0.0 or id(temp).state >= 30.0) {
      #         fi = id(color_red);
      #       } else {
      #         fi = id(color_black);
      #       }
      #       it.printf(x+100, y, id(size_30_font), fi, TextAlign::BASELINE_RIGHT , "%.1f", id(temp).state);
      #       it.printf(x+100, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
      #     }

      #     x = 0, y = y + 30;
      #     // Inside
      #     // it.printf(x+10, y, id(measures_30_font), TextAlign::BASELINE_CENTER , "\U000F050F");
      #     if (id(tempU).has_state() and not isnan(id(tempU).state)) {
      #       if (id(tempU).state <= 0.0 or id(tempU).state >= 30.0) {
      #         fi = id(color_red);
      #       } else {
      #         fi = id(color_black);
      #       }
      #       it.printf(x+100, y, id(size_30_font), fi, TextAlign::BASELINE_RIGHT , "%.1f", id(tempU).state);
      #       it.printf(x+100, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
      #     }



      #     // ALIGN Y TO BOTTOM
      #     x = 0, y = yRes - 25 - 5 - 3;
      #     //line
      #     it.line(x, y, xRes, y);

      #     //wifi
      #     if (id(wifi_rssi).has_state()) {
      #       x = xRes - 5, y = yRes - 5;
      #       // x = 265, y = 120;
      #       if (id(wifi_rssi).state >= -50) {
      #         it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0928");
      #       } else if (id(wifi_rssi).state >= -60) {
      #         it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0925");
      #       } else if (id(wifi_rssi).state >= -70) {
      #         it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0922");
      #       } else if (id(wifi_rssi).state >= -80) {
      #         it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0920");
      #       } else {
      #         it.printf(x, y, id(wlan_icon_font), id(color_red), TextAlign::BASELINE_RIGHT , "\U000F092E");
      #       }
      #     }

      #     //* Display Cycle
      #     x = 0; y = yRes - 5;
      #     if (id(select_display_cycle_interval).state != "Never") {
      #       it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E6");
      #       x = x + 24;
      #       it.printf(x, y, id(size_25_font), TextAlign::BASELINE_LEFT, "%s", id(select_display_cycle_interval).state.c_str());
      #     } else {
      #       it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E8");
      #     }

      - id: page_time_key_measures
        lambda: |-
          // Date & Time Page
          int x, y, y_m;
          esphome::Color fi;
          fi = id(color_black);
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}

          x = 0, y = 0;
          //Time
          it.strftime(x, y, id(size_50_font), "%H:%M", id(sntp_time).now());
          /* it.strftime(225, 68, id(size_60_font), "%S", id(sntp_time).now()); */

          x = 0, y = y + 50 + 5;
          //line
          it.line(x, y, xRes, y);

          x = 0, y = y + 50;
          //Weekday
          if (id(sntp_time).now().day_of_week == 1) {
            fi = id(color_red); // Sunday show in red font
          } else {
            fi = id(color_black);
          }
          // it.strftime(xRes / 2, y, id(size_25_font), fi, TextAlign::BASELINE_CENTER ,"%A", id(sntp_time).now());
          it.strftime(xRes / 2, y, id(size_50_font), fi, TextAlign::BASELINE_CENTER ,"%a", id(sntp_time).now());
          // it.strftime(250, 58, id(size_20_font), "%a", id(sntp_time).now());

          x = 0, y = y + 40;
          //date
          it.strftime(x + 53, y, id(size_40_font), TextAlign::BASELINE_RIGHT, "%d", id(sntp_time).now());
          it.printf(x + 53, y, id(size_14_font), TextAlign::BASELINE_LEFT, "D");
          it.strftime(x + 113, y, id(size_40_font), TextAlign::BASELINE_RIGHT, "%m", id(sntp_time).now());
          it.printf(x + 113, y, id(size_14_font), TextAlign::BASELINE_LEFT, "M");

          x = 0, y = y + 5;
          //line
          it.line(x, y, xRes, y);

          // x = 0, y = y + 25 + 3;
          // //sun set-rise
          // it.printf(x + 25, y, id(sun_icon_font), TextAlign::BASELINE_RIGHT, "\U000F059C");
          // it.printf(x + 125, y, id(size_25_font), TextAlign::BASELINE_RIGHT, "%s", id(sunrise).state.c_str());
          // it.printf(x + 25, y + 25, id(sun_icon_font), TextAlign::BASELINE_RIGHT, "\U000F059A");
          // it.printf(x + 125, y + 25, id(size_25_font), TextAlign::BASELINE_RIGHT, "%s", id(sunset).state.c_str());

          // x = 0, y = y + 25 + 5;
          // //line
          // it.line(x, y, xRes, y);

          //* TEMPERATURES
          x = 0, y = y + 50 + 3, y_m = y + 25;
          // fi = id(color_black);
          // Outside
          // it.printf(x+8, y_m, id(measures_30_font), TextAlign::BASELINE_CENTER , "\U000F050F");
          if (id(temp).has_state() and not isnan(id(temp).state)) {
            if (id(temp).state <= 0.0 or id(temp).state >= 30.0) {
              fi = id(color_red);
            } else {
              fi = id(color_black);
            }
            it.printf(x+100, y, id(size_50_font), fi, TextAlign::BASELINE_RIGHT , "%.1f", id(temp).state);
            it.printf(x+100, y, id(units_30_font), TextAlign::BASELINE_LEFT , "\U000F0504");
          }

          x = 0, y = y + 50;
          // Inside
          // it.printf(x+10, y, id(measures_30_font), TextAlign::BASELINE_CENTER , "\U000F050F");
          if (id(tempU).has_state() and not isnan(id(tempU).state)) {
            if (id(tempU).state <= 0.0 or id(tempU).state >= 30.0) {
              fi = id(color_red);
            } else {
              fi = id(color_black);
            }
            it.printf(x+100, y, id(size_50_font), fi, TextAlign::BASELINE_RIGHT , "%.1f", id(tempU).state);
            it.printf(x+100, y, id(units_30_font), TextAlign::BASELINE_LEFT , "\U000F0504");
          }



          // ALIGN Y TO BOTTOM
          x = 0, y = yRes - 25 - 5 - 3;
          //line
          it.line(x, y, xRes, y);

          //wifi
          if (id(wifi_rssi).has_state()) {
            x = xRes - 5, y = yRes - 5;
            // x = 265, y = 120;
            if (id(wifi_rssi).state >= -50) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0928");
            } else if (id(wifi_rssi).state >= -60) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0925");
            } else if (id(wifi_rssi).state >= -70) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0922");
            } else if (id(wifi_rssi).state >= -80) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0920");
            } else {
              it.printf(x, y, id(wlan_icon_font), id(color_red), TextAlign::BASELINE_RIGHT , "\U000F092E");
            }
          }

          //* Display Cycle
          x = 0; y = yRes - 5;
          if (id(select_display_cycle_interval).state != "Never") {
            it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E6");
            x = x + 24;
            it.printf(x, y, id(size_25_font), TextAlign::BASELINE_LEFT, "%s", id(select_display_cycle_interval).state.c_str());
          } else {
            it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E8");
          }

      # - id: page_measures
      #   lambda: |-
      #     // Date & Time Page
      #     int x, y, y_m;
      #     esphome::Color fi;
      #     #define xRes ${display_xRes}
      #     #define yRes ${display_yRes}

      #     x = 0, y = 0;
      #     //Time
      #     it.strftime(x, y, id(size_50_font), "%H:%M", id(sntp_time).now());
      #     /* it.strftime(225, 68, id(size_60_font), "%S", id(sntp_time).now()); */

      #     x = 0, y = y + 50 + 5;
      #     //line
      #     it.line(x, y, xRes, y);

      #     //* TEMPERATURES
      #     x = 0, y = y + 30 + 3, y_m = y + 20;
      #     // Outside
      #     it.printf(x+12, y_m, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F050F");
      #     if (id(temp).has_state() and not isnan(id(temp).state)) {
      #       if (id(temp).state <= 0.0 or id(temp).state >= 30.0) {
      #         fi = id(color_red);
      #       } else {
      #         fi = id(color_black);
      #       }
      #       it.printf(x+100, y, id(size_30_font), fi, TextAlign::BASELINE_RIGHT , "%.1f", id(temp).state);
      #       it.printf(x+100, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
      #     }

      #     x = 0, y = y + 30;
      #     // Inside
      #     // it.printf(x+10, y, id(measures_30_font), TextAlign::BASELINE_CENTER , "\U000F050F");
      #     if (id(tempU).has_state() and not isnan(id(tempU).state)) {
      #       if (id(tempU).state <= 0.0 or id(tempU).state >= 30.0) {
      #         fi = id(color_red);
      #       } else {
      #         fi = id(color_black);
      #       }
      #       it.printf(x+100, y, id(size_30_font), fi, TextAlign::BASELINE_RIGHT , "%.1f", id(tempU).state);
      #       it.printf(x+100, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F0504");
      #     }

      #     x = 0, y = y + 5;
      #     //line
      #     it.line(x, y, xRes, y);

      #     //* HUMIDITY
      #     x = 0, y = y + 30 + 3, y_m = y + 20;
      #     // Outside
      #     it.printf(x+12, y_m, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F058E");
      #     if (id(hum).has_state() and not isnan(id(hum).state)) {
      #       if (id(hum).state <= 20.0 or id(hum).state >= 95.0) {
      #         fi = id(color_red);
      #       } else {
      #         fi = id(color_black);
      #       }
      #       it.printf(x+100, y, id(size_30_font), fi, TextAlign::BASELINE_RIGHT , "%.1f", id(hum).state);
      #       it.printf(x+100, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
      #     }

      #     x = 0, y = y + 30;
      #     // Inside
      #     // it.printf(x+10, y, id(measures_30_font), TextAlign::BASELINE_CENTER , "\U000F058E");
      #     if (id(humU).has_state() and not isnan(id(humU).state)) {
      #       if (id(humU).state <= 20.0 or id(humU).state >= 95.0) {
      #         fi = id(color_red);
      #       } else {
      #         fi = id(color_black);
      #       }
      #       it.printf(x+100, y, id(size_30_font), fi, TextAlign::BASELINE_RIGHT , "%.1f", id(humU).state);
      #       it.printf(x+100, y, id(units_22_font), TextAlign::BASELINE_LEFT , "\U000F03F0");
      #     }

      #     x = 0, y = y + 5;
      #     //line
      #     it.line(x, y, xRes, y);

      #     //* ILLUMINANCE and UV
      #     x = 0, y = y + 30 + 3, y_m = y + 30;
      #     // Illuminance
      #     it.printf(x+16, y_m, id(measures_50_font), TextAlign::BASELINE_CENTER , "\U000F17FF");
      #     if (id(lux).has_state() and not isnan(id(lux).state)) {
      #       if(int(id(lux).state) < 99) {
      #         it.printf(x+100, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.1f", id(lux).state);
      #       } else {
      #         if(int(id(lux).state) > 9999) {
      #           it.printf(x+100, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.0fK", id(lux).state / 1000);
      #         } else {
      #           it.printf(x+100, y, id(size_30_font), TextAlign::BASELINE_RIGHT , "%.0f", id(lux).state);
      #         }
      #       }
      #       it.printf(x+104, y, id(size_20_font), TextAlign::BASELINE_LEFT , "LX");
      #     }

      #     x = 0, y = y + 30;
      #     // UV
      #     // it.printf(x+15, y, id(measures_30_font), TextAlign::BASELINE_CENTER , "\U000F058E");
      #     if (id(uv_index).has_state() and not isnan(id(uv_index).state)) {
      #       if (id(uv_index).state >= 7.0) {
      #         fi = id(color_red);
      #       } else {
      #         fi = id(color_black);
      #       }
      #       it.printf(x+90, y, id(size_30_font), fi, TextAlign::BASELINE_RIGHT , "%.0f", id(uv_index).state);
      #       it.printf(x+94, y, id(size_20_font), TextAlign::BASELINE_LEFT , "UVI");
      #     }

      #     // ALIGN Y TO BOTTOM
      #     x = 0, y = yRes - 25 - 5 - 3;
      #     //line
      #     it.line(x, y, xRes, y);

      #     //wifi
      #     if (id(wifi_rssi).has_state()) {
      #       x = xRes - 5, y = yRes - 5;
      #       // x = 265, y = 120;
      #       if (id(wifi_rssi).state >= -50) {
      #         it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0928");
      #       } else if (id(wifi_rssi).state >= -60) {
      #         it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0925");
      #       } else if (id(wifi_rssi).state >= -70) {
      #         it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0922");
      #       } else if (id(wifi_rssi).state >= -80) {
      #         it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0920");
      #       } else {
      #         it.printf(x, y, id(wlan_icon_font), id(color_red), TextAlign::BASELINE_RIGHT , "\U000F092E");
      #       }
      #     }

      #     //* Display Cycle
      #     x = 0; y = yRes - 5;
      #     if (id(select_display_cycle_interval).state != "Never") {
      #       it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E6");
      #       x = x + 24;
      #       it.printf(x, y, id(size_25_font), TextAlign::BASELINE_LEFT, "%s", id(select_display_cycle_interval).state.c_str());
      #     } else {
      #       it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E8");
      #     }

      - id: page_wifi_qr
        lambda: |-
          // QR Code for Guest WiFi
          #define xRes ${display_xRes}
          #define yRes ${display_yRes}
          #define xCenter (xRes/2 + 40) // X position center
          int x, y;

          //id(t5_display).clear();
          it.print(10, 20, id(size_14_font), TextAlign::BASELINE_LEFT, "Join Guest WIFI");
          // it.print(xRes - 40, yRes - 40, id(font_small), TextAlign::BASELINE_LEFT, "5");
          // guest wifi
          // WIFI:S:<WIFI NAME HERE>;T:WPA;P:<WIFI PASSWOD HERE>;H:false;;
          // Draw the QR-code at position [x=120,y=5] with white color and a 4x scale
          it.qr_code(5, 35, id(guestwifi_qr), COLOR_ON, 4);

          // ALIGN Y TO BOTTOM
          x = 0, y = yRes - 25 - 5 - 3;
          //line
          it.line(x, y, xRes, y);

          //wifi
          if (id(wifi_rssi).has_state()) {
            x = xRes - 5, y = yRes - 5;
            // x = 265, y = 120;
            if (id(wifi_rssi).state >= -50) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0928");
            } else if (id(wifi_rssi).state >= -60) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0925");
            } else if (id(wifi_rssi).state >= -70) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0922");
            } else if (id(wifi_rssi).state >= -80) {
              it.printf(x, y, id(wlan_icon_font), TextAlign::BASELINE_RIGHT , "\U000F0920");
            } else {
              it.printf(x, y, id(wlan_icon_font), id(color_red), TextAlign::BASELINE_RIGHT , "\U000F092E");
            }
          }


          //* Display Cycle
          x = 0; y = yRes - 5;
          if (id(select_display_cycle_interval).state != "Never") {
            it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E6");
            x = x + 24;
            it.printf(x, y, id(size_25_font), TextAlign::BASELINE_LEFT, "%s", id(select_display_cycle_interval).state.c_str());
          } else {
            it.printf(x, y, id(cycle_icon_font), TextAlign::BASELINE_LEFT, "\U000F04E8");
          }
