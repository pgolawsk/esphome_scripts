---
#* Base configuration for ESP-32-WROOM board with water sensors and global variables
# Pawelo 20230101, created as copy of board_esp12f.yaml
# Pawelo 20230305, added time_sntp amd sun by default
# Pawelo 20230305, forked as separate for water device
# Pawelo 20230924, increased flash_write_interval to 15min
# Pawelo 20231006, added global variables to preserve totals beetween boots
# Pawelo 20231008, removed flash_write_interval as it's preserved in FRAM
# Pawelo 20231010, added display refresh interval global variable
# Pawelo 20231016, adjusted pulses per liter for garden sensor
# Pawelo 20231016, update water_total_home and water_used_home at boot
# Pawelo 20231016, fix - use pulses_per_liter_garden for garden total
# Pawelo, 20241115, added area and friendly name
# Pawelo, 20241122, simplified - added regular mqtt (no RTTL support), as it can be override PRIOR this file include
# Pawelo, 20250130, added framework_version variable
# Pawelo, 20250413, added web_server_basic.yaml to avoid sorting groups (not supported in 2.x)
# Pawelo, 20250906, sdkconfig options - added increased max sockets to avoid httpd accept errors
# Pawelo, 20250906, moved sdkconfig options to sdkconfig.defaults file
# Pawelo, 20250913, added reading water total values from HA at boot if available and if current total(s) is less than 1000L then add it to current total(s)
# Pawelo, 20251023, moved reading water total values from HA to api on_client_connected event

globals:
  - id: global_watertotal_all
    type: float
    restore_value: true
    initial_value: "0.0"
  - id: global_watertotal_garden
    type: float
    restore_value: true
    initial_value: "0.0"
  # - id: global_watertotal_home
  #   type: float
  #   restore_value: true
  #   initial_value: "0.0"
  - id: global_display_cycle_page
    type: int
    # restore_value: true
    initial_value: "3"
  - id: global_display_current_cycle
    type: int
    # restore_value: true
    initial_value: "0"
  - id: global_display_enabled
    type: int
    # restore_value: true
    initial_value: "1"

esphome:
  name: $devicename
  friendly_name: $room
  area: $room
  comment: $room ESP32 controller with $devices
#  platform: ESP8266   # OLD notation
  project:
    name: $project_name
    version: $version

  # platformio_options:
  #   build_flags:
  #     # increase max sockets to avoid httpd accept errors
  #     - -DCONFIG_HTTPD_MAX_OPEN_SOCKETS=8
  #     - -DCONFIG_LWIP_MAX_SOCKETS=16

  on_boot:
    - priority: 600 # This is where most sensors are set up.
      then:
        # read totals from globals and push to sensors
        - pulse_meter.set_total_pulses:
            id: water_flow_all
            value: !lambda 'return (id(global_watertotal_all) * ${pulses_per_liter});'
        - lambda: id(water_total_all).publish_state(id(global_watertotal_all) * ${pulses_per_liter});
        - pulse_meter.set_total_pulses:
            id: water_flow_garden
            value: !lambda 'return (id(global_watertotal_garden) * ${pulses_per_liter_garden});'
        - lambda: id(water_total_garden).publish_state(id(global_watertotal_garden) * ${pulses_per_liter_garden});
        - lambda: id(water_total_home).publish_state(id(global_watertotal_all) * ${pulses_per_liter}  - id(global_watertotal_garden) * ${pulses_per_liter_garden});
        - lambda: id(water_used_home).publish_state((id(global_watertotal_all) * ${pulses_per_liter}  - id(global_watertotal_garden) * ${pulses_per_liter_garden})/1000);
    # NOTE: MOVED to api on_client_connected
    # - priority: -100 # At this priority, pretty much everything should already be initialized.
    #   #! this is in case ESPHome device was reset and lost totals in globals - to avoid losing total water usage
    #   then:
    #     - lambda: |-
    #         if (!isnan(id(ha_water_total_all).state)) {
    #           if (id(water_total_all).state < 1000) { // sanity check - only update if total is less than 1000 liters
    #             int new_total = (id(water_total_all).state * ${pulses_per_liter}) + (id(ha_water_total_all).state * ${pulses_per_liter});
    #             id(water_total_all).publish_state(new_total);
    #             ESP_LOGI("main", "on_boot: updated water_total_all from HA: %.2f L + current use: %.2f L", id(ha_water_total_all).state, id(water_total_all).state);
    #           }
    #         }
    #         if (!isnan(id(ha_water_total_garden).state)) {
    #           if (id(water_total_garden).state < 1000) { // sanity check - only update if total is less than 1000 liters
    #             int new_total = (id(water_total_garden).state * ${pulses_per_liter_garden}) + (id(ha_water_total_garden).state * ${pulses_per_liter_garden});
    #             id(water_total_garden).publish_state(new_total);
    #             ESP_LOGI("main", "on_boot: updated water_total_garden from HA: %.2f L + current use: %.2f L", id(ha_water_total_garden).state, id(water_total_all).state);
    #           }
    #         }
    #     # - lambda: id(water_total_home).publish_state(id(global_watertotal_all) * ${pulses_per_liter}  - id(global_watertotal_garden) * ${pulses_per_liter_garden});
    #     # - lambda: id(water_used_home).publish_state((id(global_watertotal_all) * ${pulses_per_liter}  - id(global_watertotal_garden) * ${pulses_per_liter_garden})/1000);
  # on_shutdown:
  #   then:
  #     - globals.set:
  #         id: global_watertotal_all
  #         value: !lambda 'return id(water_flow_all).state / ${pulses_per_liter};'
  #     - globals.set:
  #         id: global_watertotal_garden
  #         value: !lambda 'return id(water_flow_garden).state / ${pulses_per_liter};'

esp32:
  # board: esp32dev
  board: ${board} # like: esp32dev, esp32cam, esp32-c3-devkitm-1, esp32-c6-devkitm-1, esp32-s3-devkitc-1, esp32-s2-saola-1, full list here https://registry.platformio.org/platforms/platformio/espressif32/boards?version=5.3.0
  flash_size: ${flash_size} # One of 2MB, 4MB, 8MB, 16MB or 32MB
#  restore_from_flash: true
  framework:
    #! FRAM works with Arduino framework with no deprecation warnings, while ESP-IDF shows deprecation warning till 2026.3.0
    type: ${framework_type} # arduino or esp-idf
    version: ${framework_version} # like: latest, recommended, 4.4, ...

    # # only for ESP-IDF
    # sdkconfig_options:
    #   # CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
    #   CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
    #   CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
    #   CONFIG_AUDIO_BOARD_CUSTOM: "y"
    #   # some of LWIP options removed those 2 info/errors messages from logs:
    #   # [I][esp-idf:000][httpd]: E (39736) httpd: httpd_accept_conn: error in accept (23)
    #   # [I][esp-idf:000][httpd]: W (39742) httpd: httpd_server: error accepting new connection
    #   CONFIG_LWIP_SO_LINGER: "y"
    #   CONFIG_LWIP_MAX_SOCKETS: "16"
    #   CONFIG_LWIP_MAX_ACTIVE_TCP: "16"
    #   CONFIG_LWIP_TCP_MAXRTX: "12"
    #   CONFIG_LWIP_TCP_SYNMAXRTX: "6"
    #   CONFIG_LWIP_TCP_RECVMBOX_SIZE: "12"
    #   # LWIP_STATS eliminated 104 error
    #   # [I][esp-idf:000][httpd]: W (605634) httpd_txrx: httpd_sock_err: error in recv : 104
    #   CONFIG_LWIP_TCPIP_RECVMBOX_SIZE: "48"
    #   CONFIG_LWIP_STATS: "y"

# preferences:
#   flash_write_interval: 2min

# <<: !include { file: wifi_extended.yaml, vars: { extended: "_N" } }
# <<: !include { file: wifi_multi.yaml }
<<: !include { file: wifi.yaml }
<<: !include api.yaml
<<: !include ota.yaml
<<: !include logger.yaml
# <<: !include { file: web_server_basic.yaml, vars: { ota_enabled: false, web_server_version: 1 } } # ver 1 or 2 only
<<: !include { file: web_server.yaml, vars: { ota_enabled: false, web_server_version: 3 } } # ver 3 only
<<: !include time_sntp_with_sun.yaml
<<: !include sun.yaml
<<: !include prometheus.yaml
<<: !include mqtt.yaml